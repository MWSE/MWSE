--
-- EmmyLua meta files generator for MWSE-lua enumerations.
--

local lfs = require("lfs")
local common = require("builders.common")

common.log("Starting build of EmmyLua aliases meta file...")

local outputFile = "..\\misc\\package\\Data Files\\MWSE\\core\\meta\\class\\aliases.lua"
local enumerationsFolders = {
	"..\\misc\\package\\Data Files\\MWSE\\core\\lib\\tes3",
	"..\\misc\\package\\Data Files\\MWSE\\core\\lib\\mge"
}

-- Allow require-ing the files.
for _, enumerationsFolder in ipairs(enumerationsFolders) do
	package.path = enumerationsFolder .. "\\?.lua;" .. package.path
end

local blacklist = {
	["init.lua"] = true,
	["."] = true, -- Ignore the current folder, we only care about files.
	[".."] = true, -- Ignore the parent folder.
}

local fileHeader = [[-- This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
-- More information: https://github.com/MWSE/MWSE/tree/master/docs

--- @meta

]]

---@class enumerationFile
---@field namespace string Currently "mge" or "tes3"
---@field fileName string

--- This function returns the list of files that are suitable for EmmyLua aliases.
---@return enumerationFile[]
local function getFileList()
	local files = {}

	for _, enumerationsFolder in ipairs(enumerationsFolders) do
		local namespace = enumerationsFolder:match("%w+$")

		for entry in lfs.dir(enumerationsFolder) do
			if not blacklist[entry] then
				---@type enumerationFile
				local file = {
					namespace = namespace,
					-- This will match the file name, but not the extension.
					-- For example, "actionFlag.lua" will match to "actionFlag".
					fileName = entry:match("%a+"),
				}
				table.insert(files, file)
			end
		end
	end

	return files
end

---@param prefix string Should look like: `"tes3.enumName.subEnumName"` or `"tes3.enumName"`. For example, `"tes3.activeBodyPart"` or `"tes3.dialoguePage.greeting"`.
---@param keys string[] These are the keys of the table to build.
---@return string alias The compiled table that conforms to EmmyLua `---@alias` annotation.
local function buildTable(prefix, keys)
	local out = {}
	local firstLine = string.format("---@alias %s\n", prefix)
	table.insert(out, firstLine)

	for _, key in ipairs(keys) do
		local line = string.format("---| `%s.%s`\n", prefix, key)
		table.insert(out, line)
	end

	table.insert(out, "\n")

	return table.concat(out)
end

---Builds an alias for a `tes3.` enumerations file.
---@param file enumerationFile
---@return string out The EmmyLua alias annotation for the file.
local function build(file)
	common.log("Building alias for: ".. file.namespace .. "." .. file.fileName .. ".lua ...")

	local out = {}

	local enumeration = require(file.fileName)
	local keys = table.keys(enumeration)

	if type(enumeration[keys[1]]) == "table" then
		for subEnumName, subEnumeration in pairs(enumeration) do

			local prefix = string.format("%s.%s.%s", file.namespace, file.fileName, subEnumName)
			local keys = table.keys(subEnumeration)

			table.insert(out, buildTable(prefix, keys))
		end
	else
		local prefix = string.format("%s.%s", file.namespace, file.fileName)

		table.insert(out, buildTable(prefix, keys))
	end

	return table.concat(out)
end

---Builds EmmyLua aliases for provided `tes3.` enumeration files.
---@param files enumerationFile[]
---@return string out The EmmyLua alias annotation for provided files.
local function buildFiles(files)
	local out = {}

	for _, file in ipairs(files) do
		local alias = build(file)
		table.insert(out, alias)
	end

	return table.concat(out)
end

---@type enumerationFile[]
local files = getFileList()
local out = fileHeader .. buildFiles(files)

io.createwith(outputFile, out)
