#include "UTF8Convert.h"

// UTF-8 decoder
// Copyright (c) 2008-2010 Bjoern Hoehrmann <bjoern@hoehrmann.de>
// See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for details.

const uint32_t UTF8_ACCEPT = 0;
const uint32_t UTF8_REJECT = 12;

static const uint8_t utf8d[] = {
	// The first part of the table maps bytes to character classes that
	// to reduce the size of the transition table and create bitmasks.
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
	 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	 8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,

	// The second part is a transition table that maps a combination
	// of a state of the automaton and a character class to a state.
	 0,12,24,36,60,96,84,12,12,12,48,72, 12,12,12,12,12,12,12,12,12,12,12,12,
	12, 0,12,12,12,12,12, 0,12, 0,12,12, 12,24,12,12,12,12,12,24,12,24,12,12,
	12,12,12,12,12,12,12,24,12,12,12,12, 12,24,12,12,12,12,12,12,12,24,12,12,
	12,12,12,12,12,12,12,36,12,36,12,12, 12,36,12,12,12,12,12,36,12,36,12,12,
	12,36,12,12,12,12,12,12,12,12,12,12,
};

uint32_t inline decode(uint32_t* state, uint32_t* codep, uint32_t byte) {
	uint32_t type = utf8d[byte];

	*codep = (*state != UTF8_ACCEPT) ?
		(byte & 0x3fu) | (*codep << 6) :
		(0xff >> type) & (byte);

	*state = utf8d[256 + *state + type];
	return *state;
}

// UTF-8 to Codepage conversion maps.

typedef std::unordered_map<uint32_t, char> CharMap;
typedef std::unordered_map<uint32_t, std::unordered_map<char, char>> ModifierMap;

static const CharMap charTo1250 = {
	{160, 160}, {164, 164}, {166, 166}, {167, 167}, {168, 168}, {169, 169}, {171, 171}, {172, 172}, {173, 173}, {174, 174},
	{176, 176}, {177, 177}, {180, 180}, {181, 181}, {182, 182}, {183, 183}, {184, 184}, {187, 187}, {193, 193}, {194, 194},
	{196, 196}, {199, 199}, {201, 201}, {203, 203}, {205, 205}, {206, 206}, {211, 211}, {212, 212}, {214, 214}, {215, 215},
	{218, 218}, {220, 220}, {221, 221}, {223, 223}, {225, 225}, {226, 226}, {228, 228}, {231, 231}, {233, 233}, {235, 235},
	{237, 237}, {238, 238}, {243, 243}, {244, 244}, {246, 246}, {247, 247}, {250, 250}, {252, 252}, {253, 253}, {258, 195},
	{259, 227}, {260, 165}, {261, 185}, {262, 198}, {263, 230}, {268, 200}, {269, 232}, {270, 207}, {271, 239}, {272, 208},
	{273, 240}, {280, 202}, {281, 234}, {282, 204}, {283, 236}, {313, 197}, {314, 229}, {317, 188}, {318, 190}, {321, 163},
	{322, 179}, {323, 209}, {324, 241}, {327, 210}, {328, 242}, {336, 213}, {337, 245}, {340, 192}, {341, 224}, {344, 216},
	{345, 248}, {346, 140}, {347, 156}, {350, 170}, {351, 186}, {352, 138}, {353, 154}, {354, 222}, {355, 254}, {356, 141},
	{357, 157}, {366, 217}, {367, 249}, {368, 219}, {369, 251}, {377, 143}, {378, 159}, {379, 175}, {380, 191}, {381, 142},
	{382, 158}, {711, 161}, {728, 162}, {729, 255}, {731, 178}, {733, 189}, {8211, 150}, {8212, 151}, {8216, 145},
	{8217, 146}, {8218, 130}, {8220, 147}, {8221, 148}, {8222, 132}, {8224, 134}, {8225, 135}, {8226, 149}, {8230, 133},
	{8240, 137}, {8249, 139}, {8250, 155}, {8364, 128}, {8482, 153}
};

static const ModifierMap modifierTo1250 = {
	{ 769, {
		{65, 193}, {67, 198}, {69, 201}, {73, 205}, {76, 197}, {78, 209}, {79, 211}, {82, 192}, {83, 140}, {85, 218}, {89, 221},
		{90, 143}, {97, 225}, {99, 230}, {101, 233}, {105, 237}, {108, 229}, {110, 241}, {111, 243}, {114, 224}, {115, 156},
		{117, 250}, {121, 253}, {122, 159},
	}},
	{ 770, {
		{65, 194}, {73, 206}, {79, 212}, {97, 226}, {105, 238}, {111, 244},
	}},
	{ 774, {
		{65, 195}, {97, 227},
	}},
	{ 775, {
		{90, 175}, {122, 191},
	}},
	{ 776, {
		{65, 196}, {69, 203}, {79, 214}, {85, 220}, {97, 228}, {101, 235}, {111, 246}, {117, 252},
	}},
	{ 778, {
		{85, 217}, {117, 249},
	}},
	{ 779, {
		{79, 213}, {85, 219}, {111, 245}, {117, 251},
	}},
	{ 780, {
		{67, 200}, {68, 207}, {69, 204}, {76, 188}, {78, 210}, {82, 216}, {83, 138}, {84, 141}, {90, 142}, {99, 232},
		{100, 239}, {101, 236}, {108, 190}, {110, 242}, {114, 248}, {115, 154}, {116, 157}, {122, 158},
	}},
	{ 807, {
		{67, 199}, {83, 170}, {84, 222}, {99, 231}, {115, 186}, {116, 254},
	}},
	{ 808, {
		{65, 165}, {69, 202}, {97, 185}, {101, 234},
	}}
};

static const CharMap charTo1251 = {
	{160, 160}, {164, 164}, {166, 166}, {167, 167}, {169, 169}, {171, 171}, {172, 172}, {173, 173}, {174, 174}, {176, 176},
	{177, 177}, {181, 181}, {182, 182}, {183, 183}, {187, 187}, {1025, 168}, {1026, 128}, {1027, 129}, {1028, 170}, {1029, 189},
	{1030, 178}, {1031, 175}, {1032, 163}, {1033, 138}, {1034, 140}, {1035, 142}, {1036, 141}, {1038, 161}, {1039, 143},
	{1040, 192}, {1041, 193}, {1042, 194}, {1043, 195}, {1044, 196}, {1045, 197}, {1046, 198}, {1047, 199}, {1048, 200},
	{1049, 201}, {1050, 202}, {1051, 203}, {1052, 204}, {1053, 205}, {1054, 206}, {1055, 207}, {1056, 208}, {1057, 209},
	{1058, 210}, {1059, 211}, {1060, 212}, {1061, 213}, {1062, 214}, {1063, 215}, {1064, 216}, {1065, 217}, {1066, 218},
	{1067, 219}, {1068, 220}, {1069, 221}, {1070, 222}, {1071, 223}, {1072, 224}, {1073, 225}, {1074, 226}, {1075, 227},
	{1076, 228}, {1077, 229}, {1078, 230}, {1079, 231}, {1080, 232}, {1081, 233}, {1082, 234}, {1083, 235}, {1084, 236},
	{1085, 237}, {1086, 238}, {1087, 239}, {1088, 240}, {1089, 241}, {1090, 242}, {1091, 243}, {1092, 244}, {1093, 245},
	{1094, 246}, {1095, 247}, {1096, 248}, {1097, 249}, {1098, 250}, {1099, 251}, {1100, 252}, {1101, 253}, {1102, 254},
	{1103, 255}, {1105, 184}, {1106, 144}, {1107, 131}, {1108, 186}, {1109, 190}, {1110, 179}, {1111, 191}, {1112, 188},
	{1113, 154}, {1114, 156}, {1115, 158}, {1116, 157}, {1118, 162}, {1119, 159}, {1168, 165}, {1169, 180}, {8211, 150},
	{8212, 151}, {8216, 145}, {8217, 146}, {8218, 130}, {8220, 147}, {8221, 148}, {8222, 132}, {8224, 134}, {8225, 135},
	{8226, 149}, {8230, 133}, {8240, 137}, {8249, 139}, {8250, 155}, {8364, 136}, {8470, 185}, {8482, 153}
};

static const ModifierMap modifierTo1251 = {
	{ 769, {
		{1043, 129}, {1050, 141}, {1075, 131}, {1082, 157},
	}},
	{ 774, {
		{1048, 201}, {1059, 161}, {1080, 233}, {1091, 162},
	}},
	{ 776, {
		{1030, 175}, {1045, 168}, {1077, 184}, {1110, 191},
	}}
};

static const CharMap charTo1252 = {
	{160, 160}, {161, 161}, {162, 162}, {163, 163}, {164, 164}, {165, 165}, {166, 166}, {167, 167}, {168, 168}, {169, 169},
	{170, 170}, {171, 171}, {172, 172}, {173, 173}, {174, 174}, {175, 175}, {176, 176}, {177, 177}, {178, 178}, {179, 179},
	{180, 180}, {181, 181}, {182, 182}, {183, 183}, {184, 184}, {185, 185}, {186, 186}, {187, 187}, {188, 188}, {189, 189},
	{190, 190}, {191, 191}, {192, 192}, {193, 193}, {194, 194}, {195, 195}, {196, 196}, {197, 197}, {198, 198}, {199, 199},
	{200, 200}, {201, 201}, {202, 202}, {203, 203}, {204, 204}, {205, 205}, {206, 206}, {207, 207}, {208, 208}, {209, 209},
	{210, 210}, {211, 211}, {212, 212}, {213, 213}, {214, 214}, {215, 215}, {216, 216}, {217, 217}, {218, 218}, {219, 219},
	{220, 220}, {221, 221}, {222, 222}, {223, 223}, {224, 224}, {225, 225}, {226, 226}, {227, 227}, {228, 228}, {229, 229},
	{230, 230}, {231, 231}, {232, 232}, {233, 233}, {234, 234}, {235, 235}, {236, 236}, {237, 237}, {238, 238}, {239, 239},
	{240, 240}, {241, 241}, {242, 242}, {243, 243}, {244, 244}, {245, 245}, {246, 246}, {247, 247}, {248, 248}, {249, 249},
	{250, 250}, {251, 251}, {252, 252}, {253, 253}, {254, 254}, {255, 255}, {338, 140}, {339, 156}, {352, 138}, {353, 154},
	{376, 159}, {381, 142}, {382, 158}, {402, 131}, {710, 136}, {732, 152}, {8211, 150}, {8212, 151}, {8216, 145},
	{8217, 146}, {8218, 130}, {8220, 147}, {8221, 148}, {8222, 132}, {8224, 134}, {8225, 135}, {8226, 149}, {8230, 133},
	{8240, 137}, {8249, 139}, {8250, 155}, {8364, 128}, {8482, 153}
};

static const ModifierMap modifierTo1252 = {
	{ 768, {
		{65, 192}, {69, 200}, {73, 204}, {79, 210}, {85, 217}, {97, 224}, {101, 232}, {105, 236}, {111, 242}, {117, 249},
	}},
	{ 769, {
		{65, 193}, {69, 201}, {73, 205}, {79, 211}, {85, 218}, {89, 221}, {97, 225}, {101, 233}, {105, 237}, {111, 243},
		{117, 250}, {121, 253},
	}},
	{ 770, {
		{65, 194}, {69, 202}, {73, 206}, {79, 212}, {85, 219}, {97, 226}, {101, 234}, {105, 238}, {111, 244}, {117, 251},
	}},
	{ 771, {
		{65, 195}, {78, 209}, {79, 213}, {97, 227}, {110, 241}, {111, 245},
	}},
	{ 776, {
		{65, 196}, {69, 203}, {73, 207}, {79, 214}, {85, 220}, {89, 159}, {97, 228}, {101, 235}, {105, 239}, {111, 246},
		{117, 252}, {121, 255},
	}},
	{ 778, {
		{65, 197}, {97, 229},
	}},
	{ 780, {
		{83, 138}, {90, 142}, {115, 154}, {122, 158},
	}},
	{ 807, {
		{67, 199}, {99, 231},
	}}
};

// UTF-8 to Codepage conversion functions.

std::string utf8convert(const CharMap& charMap, const ModifierMap& modifierMap, const char* utf8string) {
	size_t len = std::strlen(utf8string);
	std::string output;
	output.reserve(len);

	const char* s = utf8string;
	const char* end = utf8string + len;
	uint32_t state = UTF8_ACCEPT, codepoint = 0;

	while (s < end) {
		// Decode bytes until codepoint is accepted.
		uint8_t b = *s++;
		if (decode(&state, &codepoint, b) != UTF8_ACCEPT) continue;

		// Check for ASCII codepoint.
		if (codepoint < 128) {
			output.push_back(char(codepoint));
			continue;
		}

		// Check for single character conversion.
		auto letter = charMap.find(codepoint);
		if (letter != charMap.end()) {
			output.push_back(letter->second);
			continue;
		}

		// Check for modifier to apply to previous character.
		auto modifier = modifierMap.find(codepoint);
		if (modifier != modifierMap.end() && !output.empty()) {
			auto lastChar = output.end() - 1;
			auto letter = modifier->second.find(*lastChar);
			if (letter != modifier->second.end()) {
				*lastChar = letter->second;
			}
			continue;
		}

		// Replacement character.
		output.push_back('?');
	}

	return output;
}

namespace mwse {
	std::string iconv(int languageCode, const char* utf8string) {
		switch (languageCode) {
		case 0: // eng
		case 1: // fra
		case 2: // deu
			return utf8convert(charTo1252, modifierTo1252, utf8string);
		case 3: // rus
			return utf8convert(charTo1251, modifierTo1251, utf8string);
		case 4: // pol
			return utf8convert(charTo1250, modifierTo1250, utf8string);
		}
		return utf8string;
	}
}