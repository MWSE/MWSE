-- This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
-- More information: https://github.com/MWSE/MWSE/tree/master/docs

--- @meta
--- @diagnostic disable:undefined-doc-name

--- The tes3 library provides the majority of the functions for interacting with the game system.
--- @class tes3lib
--- @field bsaLoader tes3bsaLoader One of the core game objects, responsible for loaded BSA files.
--- @field dataHandler tes3dataHandler One of the core game objects.
--- @field game tes3game One of the core game objects.
--- @field installDirectory string The currently executed root Morrowind installation path.
--- @field magicSchoolSkill number This table is used to convert numerical magic school IDs to their respective skill IDs. These constants will return their respective `tes3.skill` constants.
--- @field mobilePlayer tes3mobilePlayer The player's mobile actor.
--- @field player tes3reference A reference to the player.
--- @field player1stPerson tes3reference A reference used for the player's first person hands.
--- @field worldController tes3worldController One of the core game objects.
tes3 = {}

--- Registers a new armor slot. Adds a new place for armor pieces with a matching slot number to equip to.
--- @param params tes3.addArmorSlot.params This table accepts the following values:
--- 
--- `slot`: number — Armor slot number. A number greater than 10 to configure a slot for.
--- 
--- `name`: string — No description yet available.
--- 
--- `weight`: number? — *Default*: `0`. A stand-in for the armor base weight value, typically controlled by a GMST (e.g. iHelmWeight).
--- 
--- `scalar`: number? — *Default*: `0.1`. A multiplier with range 0.0-1.0 that controls how much of an item's armor value applies to a character's overall armor rating. For comparison, standard chest armor uses 0.3, helmets, greaves and pauldrons use 0.1, and gauntlets use 0.05.
--- @return boolean wasAdded No description yet available.
function tes3.addArmorSlot(params) end

---Table parameter definitions for `tes3.addArmorSlot`.
--- @class tes3.addArmorSlot.params
--- @field slot number Armor slot number. A number greater than 10 to configure a slot for.
--- @field name string No description yet available.
--- @field weight number? *Default*: `0`. A stand-in for the armor base weight value, typically controlled by a GMST (e.g. iHelmWeight).
--- @field scalar number? *Default*: `0.1`. A multiplier with range 0.0-1.0 that controls how much of an item's armor value applies to a character's overall armor rating. For comparison, standard chest armor uses 0.3, helmets, greaves and pauldrons use 0.1, and gauntlets use 0.05.

--- Registers a new clothing slot. Adds a new place for clothing pieces with a matching slot number to equip to.
--- @param params tes3.addClothingSlot.params This table accepts the following values:
--- 
--- `slot`: number — Clothing slot number. A number greater than 9 to configure a slot for.
--- 
--- `name`: string — No description yet available.
function tes3.addClothingSlot(params) end

---Table parameter definitions for `tes3.addClothingSlot`.
--- @class tes3.addClothingSlot.params
--- @field slot number Clothing slot number. A number greater than 9 to configure a slot for.
--- @field name string No description yet available.

--- Adds an item to a given reference's inventory or mobile's inventory.
--- @param params tes3.addItem.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to give items to.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|tes3leveledItem|string — The item to add. If a leveled item is passed, it will be resolved and added.
--- 
--- `itemData`: tes3itemData? — *Optional*. The item data for the item.
--- 
--- `soul`: tes3creature|tes3npc|nil — *Optional*. For creating filled soul gems.
--- 
--- `count`: number? — *Default*: `1`. The maximum number of items to add.
--- 
--- `playSound`: boolean? — *Default*: `true`. If `false`, the up/down sound for the item won't be played. This only applies if `reference` is the player.
--- 
--- `showMessage`: boolean? — *Default*: `false`. If `true`, a message box notifying the player will be shown. This only applies if `reference` is the player.
--- 
--- `limit`: boolean? — *Default*: `false`. If `false`, items can be placed into containers that shouldn't normally be allowed. This includes organic containers, and containers that are full.
--- 
--- `reevaluateEquipment`: boolean? — *Default*: `true`. If `true`, and the item added is armor, clothing, or a weapon, the actor will reevaluate its equipment choices to see if the new item is worth equipping. This does not affect the player.
--- 
--- `equipProjectiles`: boolean? — *Default*: `true`. If `true`, and the reference has the same projectile already equipped, the stacks will be merged. This will only work if the GUI is updated.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If `false`, the function won't manually resync the player's GUI state. This can result in some optimizations, though [`tes3ui.forcePlayerInventoryUpdate()`](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uiforceplayerinventoryupdate) must manually be called after all inventory updates are finished.
--- @return number addedCount No description yet available.
function tes3.addItem(params) end

---Table parameter definitions for `tes3.addItem`.
--- @class tes3.addItem.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to give items to.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|tes3leveledItem|string The item to add. If a leveled item is passed, it will be resolved and added.
--- @field itemData tes3itemData? *Optional*. The item data for the item.
--- @field soul tes3creature|tes3npc|nil *Optional*. For creating filled soul gems.
--- @field count number? *Default*: `1`. The maximum number of items to add.
--- @field playSound boolean? *Default*: `true`. If `false`, the up/down sound for the item won't be played. This only applies if `reference` is the player.
--- @field showMessage boolean? *Default*: `false`. If `true`, a message box notifying the player will be shown. This only applies if `reference` is the player.
--- @field limit boolean? *Default*: `false`. If `false`, items can be placed into containers that shouldn't normally be allowed. This includes organic containers, and containers that are full.
--- @field reevaluateEquipment boolean? *Default*: `true`. If `true`, and the item added is armor, clothing, or a weapon, the actor will reevaluate its equipment choices to see if the new item is worth equipping. This does not affect the player.
--- @field equipProjectiles boolean? *Default*: `true`. If `true`, and the reference has the same projectile already equipped, the stacks will be merged. This will only work if the GUI is updated.
--- @field updateGUI boolean? *Default*: `true`. If `false`, the function won't manually resync the player's GUI state. This can result in some optimizations, though [`tes3ui.forcePlayerInventoryUpdate()`](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uiforceplayerinventoryupdate) must manually be called after all inventory updates are finished.

--- Creates an item data if there is room for a new stack in a given inventory. This can be then used to add custom user data or adjust an item's condition. This will return nil if no item data could be allocated for the item -- for example if the reference doesn't have the item in their inventory or each item of that type already has item data.
--- @param params tes3.addItemData.params This table accepts the following values:
--- 
--- `to`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference or mobile whose inventory will be modified.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — The item to create item data for.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If false, the player or contents menu won't be updated.
--- @return tes3itemData createdData No description yet available.
function tes3.addItemData(params) end

---Table parameter definitions for `tes3.addItemData`.
--- @class tes3.addItemData.params
--- @field to tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference or mobile whose inventory will be modified.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string The item to create item data for.
--- @field updateGUI boolean? *Default*: `true`. If false, the player or contents menu won't be updated.

--- This function creates a new journal entry. It can be called once the world controller is loaded.
--- @param params tes3.addJournalEntry.params This table accepts the following values:
--- 
--- `text`: string — The text of the new Journal entry.
--- 
--- `showMessage`: boolean? — *Default*: `true`. If this parameter is true, a "Your journal has been updated" message will be displayed.
function tes3.addJournalEntry(params) end

---Table parameter definitions for `tes3.addJournalEntry`.
--- @class tes3.addJournalEntry.params
--- @field text string The text of the new Journal entry.
--- @field showMessage boolean? *Default*: `true`. If this parameter is true, a "Your journal has been updated" message will be displayed.

--- This function creates a new custom magic effect. The effect can be scripted through lua. This function should be used inside [`magicEffectsResolved`](https://mwse.github.io/MWSE/events/magicEffectsResolved/) event callback.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3addmagiceffect).
--- @param params tes3.addMagicEffect.params This table accepts the following values:
--- 
--- `id`: number — Id of the new effect. Maps to newly claimed `tes3.effect` constants with `tes3.claimSpellEffectId()`. If the effect of this id already exists, an error will be thrown.
--- 
--- `name`: string? — *Default*: `Unnamed Effect`. Name of the effect.
--- 
--- `baseCost`: number? — *Default*: `1`. Base magicka cost for the effect.
--- 
--- `school`: integer? — *Default*: `tes3.magicSchool.alteration`. The magic school the new effect will be assigned to. Maps to [`tes3.magicSchool`](https://mwse.github.io/MWSE/references/magic-schools/) constants.
--- 
--- `size`: number? — *Default*: `1`. Controls how much the visual effect scales with its magnitude.
--- 
--- `sizeCap`: number? — *Default*: `1`. The maximum possible size of the projectile.
--- 
--- `speed`: number? — *Default*: `1`. No description yet available.
--- 
--- `description`: string? — *Default*: `No description available.`. Description for the effect.
--- 
--- `lighting`: table? — *Optional*. No description yet available.
--- 
--- `icon`: string — Path to the effect icon. Must be a string no longer than 31 characters long. Use double \ as path separator.
--- 
--- `particleTexture`: string — Path to the particle texture to use for the effect. Must be a string no longer than 31 characters long.
--- 
--- `castSound`: string — The sound ID which will be played on casting a spell with this effect. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- 
--- `boltSound`: string — The sound ID which will be played when a spell with this effect is in flight. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- 
--- `hitSound`: string — The sound ID which will be played when a spell with this effect hits something. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- 
--- `areaSound`: string — The sound ID which will be played on area of effect impact. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- 
--- `castVFX`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil — *Optional*. The visual played when a spell with this effect is cast.
--- 
--- `boltVFX`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil — *Optional*. The visual played when a spell with this effect is in flight.
--- 
--- `hitVFX`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil — *Optional*. The visual played when a spell with this effect hits something.
--- 
--- `areaVFX`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil — *Optional*. The visual played when a spell with this effect, with area of effect hits something.
--- 
--- `allowEnchanting`: boolean? — *Default*: `true`. A flag which controls whether this effect can be used in a custom enchantment.
--- 
--- `allowSpellmaking`: boolean? — *Default*: `true`. A flag which controls whether this effect can be used in a custom spell.
--- 
--- `appliesOnce`: boolean? — *Default*: `true`. A flag which controls whether this effect applies once or is a ticking effect.
--- 
--- `canCastSelf`: boolean? — *Default*: `true`. A flag which controls whether this effect can be used with cast on self range.
--- 
--- `canCastTarget`: boolean? — *Default*: `true`. A flag which controls whether this effect can be used with cast on target range.
--- 
--- `canCastTouch`: boolean? — *Default*: `true`. A flag which controls whether this effect can be used with cast on touch range.
--- 
--- `casterLinked`: boolean? — *Default*: `true`. Access to the base flag that determines if this effect must end if caster is dead, or not an NPC/creature. Not allowed in container or door trap spells.
--- --- 
--- --- Note that this property is hidden in the Construction Set.
--- 
--- `hasContinuousVFX`: boolean? — *Default*: `true`. A flag which controls whether the effect's visual is continuously played during the whole duration of the effect.
--- 
--- `hasNoDuration`: boolean? — *Default*: `true`. A flag which controls whether this effect doesn't have duration.
--- 
--- `hasNoMagnitude`: boolean? — *Default*: `true`. A flag which controls whether this effect doesn't have magnitude.
--- 
--- `illegalDaedra`: boolean? — *Default*: `true`. A flag which controls whether this effect is illegal to use in public, because it summons Daedra. Note: this mechanic is not implemented in the game. Some mods might rely on this parameter.
--- 
--- `isHarmful`: boolean? — *Default*: `true`. A flag which controls whether this effect is considered harmful and casting it can be considered as an attack.
--- 
--- `nonRecastable`: boolean? — *Default*: `true`. A flag which controls whether this effect can be recast while it already is in duration.
--- 
--- `targetsAttributes`: boolean? — *Default*: `true`. A flag which controls whether this effect targets a certain attribute or attributes.
--- 
--- `targetsSkills`: boolean? — *Default*: `true`. A flag which controls whether this effect targets a certain skill or skills.
--- 
--- `unreflectable`: boolean? — *Default*: `true`. A flag which controls whether this effect can be reflected.
--- 
--- `usesNegativeLighting`: boolean? — *Default*: `true`. A flag which controls whether this effect uses negative lighting.
--- 
--- `onTick`: function? — *Optional*. A function which will be called on each tick of a spell containing this effect. A table `tickParams` will be passed to the callback function. Note: `dt`(frame time) scaling is handled automatically.
--- --- 		- `tickParams` (table)
--- --- 			- `effectId` (number)
--- --- 			- `sourceInstance` ([tes3magicSourceInstance](https://mwse.github.io/MWSE/types/tes3magicSourceInstance/)): Access to the magic source of the effect instance.
--- --- 			- `deltaTime` (number): The time passed since the last tick of the spell.
--- --- 			- `effectInstance` ([tes3magicEffectInstance](https://mwse.github.io/MWSE/types/tes3magicEffectInstance/)): Access to the magic effect instance.
--- --- 			- `effectIndex` (number): The index of the effect in the spell.
--- --- 
--- --- 		In addition, a function registered as `onTick` can also call the following methods:
--- --- 
--- --- 		- trigger(`triggerParams`): Allows the effect to run through the normal spell event system.
--- --- 			**Parameters:**
--- --- 			- `triggerParams` (table)
--- --- 				- `negateOnExpiry` (boolean): *Optional. Default:* `true` If this flag is `true`, the effect will be negated on expiry.
--- --- 				- `isUncapped` (boolean): *Optional.*
--- --- 				- `attribute` (number): *Optional. Default:* `tes3.effectAttribute.nonResistable` The attribute used in resistance calculations agains this effect. Maps to values in [`tes3.effectAttribute`](https://mwse.github.io/MWSE/references/effect-attributes/) namespace.
--- --- 				- `type` (number): *Optional. Default:* `tes3.effectEventType.boolean`. This flag controls how the effect behaves. For example, `tes3.effectEventType.modStatistic` will make the effect work as calling `tes3.modStatistic`. Maps to values in [`tes3.effectEventType`](https://mwse.github.io/MWSE/references/effect-event-types/) namespace.
--- --- 				- `value` (number): *Optional. Default:* `0`. The variable this effect changes.
--- --- 				- `resistanceCheck(resistParams)` (function): *Optional.* The function passed as `resistanceCheck` will be used on any of the game's spell resistance checks. For example, the only effect in vanilla Morrowind that implements this function is Water Walking. It disallows using a spell with Water Walking when the player is deep underwater, by setting it as expired. So, returning `true` from this function will set your effect to expired, and depending on your trigger code may stop processing. The function passed here must returns boolean values.
--- --- 					**Parameters**
--- --- 					- `resistParams` (table)
--- --- 						- `sourceInstance` ([tes3magicSourceInstance](https://mwse.github.io/MWSE/types/tes3magicSourceInstance/)): Access to the magic source of the effect instance.
--- --- 						- `effectInstance` ([tes3magicEffectInstance](https://mwse.github.io/MWSE/types/tes3magicEffectInstance/)): Access to the magic effect instance.
--- --- 						- `effectIndex` (number): The index of the effect in the spell.
--- --- 
--- --- 		- triggerBoundWeapon(`id`): Performs vanilla weapon summoning logic. It will create a summoned version of the weapon with provided ID.
--- --- 			**Parameters:**
--- --- 			- `id` (string): The ID of the weapon object to summon.
--- --- 
--- --- 		- triggerBoundArmor(`params`): Performs vanilla armor summoning logic. It can summon one or two armor objects with provided ID(s).
--- --- 			**Parameters:**
--- --- 			- `params` (table)
--- --- 				- `id` (string): The ID of the armor object to summon.
--- --- 				- `id2` (string): *Optional.* The ID of the additional armor object to summon.
--- --- 
--- --- 		- triggerSummon(`id`): Performs vanilla creature summoning logic. It will create a summoned version of a creature with provided ID.
--- --- 			**Parameters:**
--- --- 			- `id` (string): The ID of the creature object to summon.
--- --- 
--- 
--- `onCollision`: function? — *Optional*. A function which will be called when a spell containing this spell effect collides with something.
--- @return tes3magicEffect effect No description yet available.
function tes3.addMagicEffect(params) end

---Table parameter definitions for `tes3.addMagicEffect`.
--- @class tes3.addMagicEffect.params
--- @field id number Id of the new effect. Maps to newly claimed `tes3.effect` constants with `tes3.claimSpellEffectId()`. If the effect of this id already exists, an error will be thrown.
--- @field name string? *Default*: `Unnamed Effect`. Name of the effect.
--- @field baseCost number? *Default*: `1`. Base magicka cost for the effect.
--- @field school integer? *Default*: `tes3.magicSchool.alteration`. The magic school the new effect will be assigned to. Maps to [`tes3.magicSchool`](https://mwse.github.io/MWSE/references/magic-schools/) constants.
--- @field size number? *Default*: `1`. Controls how much the visual effect scales with its magnitude.
--- @field sizeCap number? *Default*: `1`. The maximum possible size of the projectile.
--- @field speed number? *Default*: `1`. No description yet available.
--- @field description string? *Default*: `No description available.`. Description for the effect.
--- @field lighting table? *Optional*. No description yet available.
--- @field icon string Path to the effect icon. Must be a string no longer than 31 characters long. Use double \ as path separator.
--- @field particleTexture string Path to the particle texture to use for the effect. Must be a string no longer than 31 characters long.
--- @field castSound string The sound ID which will be played on casting a spell with this effect. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- @field boltSound string The sound ID which will be played when a spell with this effect is in flight. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- @field hitSound string The sound ID which will be played when a spell with this effect hits something. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- @field areaSound string The sound ID which will be played on area of effect impact. Must be a string no longer than 31 characters long. If not specified, the default sound for the spell school will be used.
--- @field castVFX tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil *Optional*. The visual played when a spell with this effect is cast.
--- @field boltVFX tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil *Optional*. The visual played when a spell with this effect is in flight.
--- @field hitVFX tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil *Optional*. The visual played when a spell with this effect hits something.
--- @field areaVFX tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil *Optional*. The visual played when a spell with this effect, with area of effect hits something.
--- @field allowEnchanting boolean? *Default*: `true`. A flag which controls whether this effect can be used in a custom enchantment.
--- @field allowSpellmaking boolean? *Default*: `true`. A flag which controls whether this effect can be used in a custom spell.
--- @field appliesOnce boolean? *Default*: `true`. A flag which controls whether this effect applies once or is a ticking effect.
--- @field canCastSelf boolean? *Default*: `true`. A flag which controls whether this effect can be used with cast on self range.
--- @field canCastTarget boolean? *Default*: `true`. A flag which controls whether this effect can be used with cast on target range.
--- @field canCastTouch boolean? *Default*: `true`. A flag which controls whether this effect can be used with cast on touch range.
--- @field casterLinked boolean? *Default*: `true`. Access to the base flag that determines if this effect must end if caster is dead, or not an NPC/creature. Not allowed in container or door trap spells.
--- 
--- Note that this property is hidden in the Construction Set.
--- @field hasContinuousVFX boolean? *Default*: `true`. A flag which controls whether the effect's visual is continuously played during the whole duration of the effect.
--- @field hasNoDuration boolean? *Default*: `true`. A flag which controls whether this effect doesn't have duration.
--- @field hasNoMagnitude boolean? *Default*: `true`. A flag which controls whether this effect doesn't have magnitude.
--- @field illegalDaedra boolean? *Default*: `true`. A flag which controls whether this effect is illegal to use in public, because it summons Daedra. Note: this mechanic is not implemented in the game. Some mods might rely on this parameter.
--- @field isHarmful boolean? *Default*: `true`. A flag which controls whether this effect is considered harmful and casting it can be considered as an attack.
--- @field nonRecastable boolean? *Default*: `true`. A flag which controls whether this effect can be recast while it already is in duration.
--- @field targetsAttributes boolean? *Default*: `true`. A flag which controls whether this effect targets a certain attribute or attributes.
--- @field targetsSkills boolean? *Default*: `true`. A flag which controls whether this effect targets a certain skill or skills.
--- @field unreflectable boolean? *Default*: `true`. A flag which controls whether this effect can be reflected.
--- @field usesNegativeLighting boolean? *Default*: `true`. A flag which controls whether this effect uses negative lighting.
--- @field onTick function? *Optional*. A function which will be called on each tick of a spell containing this effect. A table `tickParams` will be passed to the callback function. Note: `dt`(frame time) scaling is handled automatically.
--- 		- `tickParams` (table)
--- 			- `effectId` (number)
--- 			- `sourceInstance` ([tes3magicSourceInstance](https://mwse.github.io/MWSE/types/tes3magicSourceInstance/)): Access to the magic source of the effect instance.
--- 			- `deltaTime` (number): The time passed since the last tick of the spell.
--- 			- `effectInstance` ([tes3magicEffectInstance](https://mwse.github.io/MWSE/types/tes3magicEffectInstance/)): Access to the magic effect instance.
--- 			- `effectIndex` (number): The index of the effect in the spell.
--- 
--- 		In addition, a function registered as `onTick` can also call the following methods:
--- 
--- 		- trigger(`triggerParams`): Allows the effect to run through the normal spell event system.
--- 			**Parameters:**
--- 			- `triggerParams` (table)
--- 				- `negateOnExpiry` (boolean): *Optional. Default:* `true` If this flag is `true`, the effect will be negated on expiry.
--- 				- `isUncapped` (boolean): *Optional.*
--- 				- `attribute` (number): *Optional. Default:* `tes3.effectAttribute.nonResistable` The attribute used in resistance calculations agains this effect. Maps to values in [`tes3.effectAttribute`](https://mwse.github.io/MWSE/references/effect-attributes/) namespace.
--- 				- `type` (number): *Optional. Default:* `tes3.effectEventType.boolean`. This flag controls how the effect behaves. For example, `tes3.effectEventType.modStatistic` will make the effect work as calling `tes3.modStatistic`. Maps to values in [`tes3.effectEventType`](https://mwse.github.io/MWSE/references/effect-event-types/) namespace.
--- 				- `value` (number): *Optional. Default:* `0`. The variable this effect changes.
--- 				- `resistanceCheck(resistParams)` (function): *Optional.* The function passed as `resistanceCheck` will be used on any of the game's spell resistance checks. For example, the only effect in vanilla Morrowind that implements this function is Water Walking. It disallows using a spell with Water Walking when the player is deep underwater, by setting it as expired. So, returning `true` from this function will set your effect to expired, and depending on your trigger code may stop processing. The function passed here must returns boolean values.
--- 					**Parameters**
--- 					- `resistParams` (table)
--- 						- `sourceInstance` ([tes3magicSourceInstance](https://mwse.github.io/MWSE/types/tes3magicSourceInstance/)): Access to the magic source of the effect instance.
--- 						- `effectInstance` ([tes3magicEffectInstance](https://mwse.github.io/MWSE/types/tes3magicEffectInstance/)): Access to the magic effect instance.
--- 						- `effectIndex` (number): The index of the effect in the spell.
--- 
--- 		- triggerBoundWeapon(`id`): Performs vanilla weapon summoning logic. It will create a summoned version of the weapon with provided ID.
--- 			**Parameters:**
--- 			- `id` (string): The ID of the weapon object to summon.
--- 
--- 		- triggerBoundArmor(`params`): Performs vanilla armor summoning logic. It can summon one or two armor objects with provided ID(s).
--- 			**Parameters:**
--- 			- `params` (table)
--- 				- `id` (string): The ID of the armor object to summon.
--- 				- `id2` (string): *Optional.* The ID of the additional armor object to summon.
--- 
--- 		- triggerSummon(`id`): Performs vanilla creature summoning logic. It will create a summoned version of a creature with provided ID.
--- 			**Parameters:**
--- 			- `id` (string): The ID of the creature object to summon.
--- 
--- @field onCollision function? *Optional*. A function which will be called when a spell containing this spell effect collides with something.

--- Causes a misc item to be recognized as a soul gem, so that it can be used for soul trapping.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3addsoulgem).
--- @param params tes3.addSoulGem.params This table accepts the following values:
--- 
--- `item`: tes3misc|string — The item to recognize as a soul gem.
--- @return boolean wasAdded No description yet available.
function tes3.addSoulGem(params) end

---Table parameter definitions for `tes3.addSoulGem`.
--- @class tes3.addSoulGem.params
--- @field item tes3misc|string The item to recognize as a soul gem.

--- Adds a spell to an actor's spell list. If the spell is passive, the effects will be applied.
--- @param params tes3.addSpell.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to give the spell to. To manipulate an actor without specifying any particular reference, use `actor` instead.
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string — Who to give the spell to. Providing a base actor can be done before a save has been loaded, but may not correctly update effects for instanced versions of that actor in an active save.
--- 
--- `spell`: tes3spell|string — The spell to add.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If true, the GUI will be updated respecting the adding of the spell. This can be useful to disable when batch-adding many spells. The batch should be ended with [`tes3.updateMagicGUI`](https://mwse.github.io/MWSE/apis/tes3/#tes3updatemagicgui) to reflect the changes.
--- @return boolean wasAdded True if the spell was successfully added. This can be false if the actor's race or birthsign already contains the spell.
function tes3.addSpell(params) end

---Table parameter definitions for `tes3.addSpell`.
--- @class tes3.addSpell.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to give the spell to. To manipulate an actor without specifying any particular reference, use `actor` instead.
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string Who to give the spell to. Providing a base actor can be done before a save has been loaded, but may not correctly update effects for instanced versions of that actor in an active save.
--- @field spell tes3spell|string The spell to add.
--- @field updateGUI boolean? *Default*: `true`. If true, the GUI will be updated respecting the adding of the spell. This can be useful to disable when batch-adding many spells. The batch should be ended with [`tes3.updateMagicGUI`](https://mwse.github.io/MWSE/apis/tes3/#tes3updatemagicgui) to reflect the changes.

--- Adds a topic to the valid topic list for the player. This doesn't create a dynamic new topic.
--- @param params tes3.addTopic.params This table accepts the following values:
--- 
--- `topic`: tes3dialogue|string — The topic to add
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If true, the GUI will be updated respecting the adding of the topic.
--- @return boolean wasAdded True if the topic was successfully added. This can be false if the topic already existed in the player's list.
function tes3.addTopic(params) end

---Table parameter definitions for `tes3.addTopic`.
--- @class tes3.addTopic.params
--- @field topic tes3dialogue|string The topic to add
--- @field updateGUI boolean? *Default*: `true`. If true, the GUI will be updated respecting the adding of the topic.

--- Changes the volume of a sound that is playing on a given reference.
--- @param params tes3.adjustSoundVolume.params This table accepts the following values:
--- 
--- `sound`: tes3sound|string — The sound object, or id of the sound to look for.
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to attach the sound to.
--- 
--- `mixChannel`: integer? — *Default*: `tes3.soundMix.effects`. The channel to base volume off of. Maps to [`tes3.soundMix`](https://mwse.github.io/MWSE/references/sound-mix-types/) constants.
--- 
--- `volume`: number? — *Default*: `1.0`. A value between 0.0 and 1.0 to scale the volume off of.
function tes3.adjustSoundVolume(params) end

---Table parameter definitions for `tes3.adjustSoundVolume`.
--- @class tes3.adjustSoundVolume.params
--- @field sound tes3sound|string The sound object, or id of the sound to look for.
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to attach the sound to.
--- @field mixChannel integer? *Default*: `tes3.soundMix.effects`. The channel to base volume off of. Maps to [`tes3.soundMix`](https://mwse.github.io/MWSE/references/sound-mix-types/) constants.
--- @field volume number? *Default*: `1.0`. A value between 0.0 and 1.0 to scale the volume off of.

--- Advances the game time. Can be used to simulate player resting.
--- @param params tes3.advanceTime.params This table accepts the following values:
--- 
--- `hours`: number — How many hours to progress.
--- 
--- `resting`: boolean? — *Default*: `false`. Should advancing time count as resting? If set to true invokes usual sleeping mechanics: health, fatigue and magicka restoration, and possible rest interruption. The length of the rest will be equal to hours parameter, rounded down to nearest natural number.
--- 
--- `updateEnvironment`: boolean? — *Default*: `true`. Controls if the weather system is updated for each hour passed.
--- @return number hoursPassed No description yet available.
function tes3.advanceTime(params) end

---Table parameter definitions for `tes3.advanceTime`.
--- @class tes3.advanceTime.params
--- @field hours number How many hours to progress.
--- @field resting boolean? *Default*: `false`. Should advancing time count as resting? If set to true invokes usual sleeping mechanics: health, fatigue and magicka restoration, and possible rest interruption. The length of the rest will be equal to hours parameter, rounded down to nearest natural number.
--- @field updateEnvironment boolean? *Default*: `true`. Controls if the weather system is updated for each hour passed.

--- 
--- @param params tes3.applyMagicSource.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — A reference on which the magic source will be applied.
--- 
--- `source`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon|nil — *Optional*. A magic source to apply.
--- 
--- `name`: string? — *Optional*. While optional for other uses, if applying alchemy as a source, you must specify a name for the magic source.
--- 
--- `effects`: table? — *Optional*. A table of custom effects to apply as a potion. Maximal number of effects is 8.
--- 
--- `createCopy`: boolean? — *Default*: `true`. This parameter controls whether the function will return the original magic source or a copy of the magic source. This parameter is only used if source is alchemy.
--- 
--- `fromStack`: tes3equipmentStack? — *Optional*. The piece of equipment this magic source is coming from. The fromStack has to be an already equipped item from tes3actor.equipment. This will probably change in the future.
--- 
--- `castChance`: number? — *Optional*. This parameter allows overriding the casting chance of the magic source.
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Optional*. The target of the magic.
--- 
--- `bypassResistances`: boolean? — *Default*: `false`. Is this effect going to bypass magic resistance?
--- @return tes3magicSourceInstance instance No description yet available.
function tes3.applyMagicSource(params) end

---Table parameter definitions for `tes3.applyMagicSource`.
--- @class tes3.applyMagicSource.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string A reference on which the magic source will be applied.
--- @field source tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon|nil *Optional*. A magic source to apply.
--- @field name string? *Optional*. While optional for other uses, if applying alchemy as a source, you must specify a name for the magic source.
--- @field effects table? *Optional*. A table of custom effects to apply as a potion. Maximal number of effects is 8.
--- @field createCopy boolean? *Default*: `true`. This parameter controls whether the function will return the original magic source or a copy of the magic source. This parameter is only used if source is alchemy.
--- @field fromStack tes3equipmentStack? *Optional*. The piece of equipment this magic source is coming from. The fromStack has to be an already equipped item from tes3actor.equipment. This will probably change in the future.
--- @field castChance number? *Optional*. This parameter allows overriding the casting chance of the magic source.
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Optional*. The target of the magic.
--- @field bypassResistances boolean? *Default*: `false`. Is this effect going to bypass magic resistance?

--- Returns a string with all the [text defines](https://en.uesp.net/wiki/Morrowind_Mod:Text_Defines) replaced in the input string. This can be used to replicate the behavior of book and dialogue text.
--- @param params tes3.applyTextDefines.params This table accepts the following values:
--- 
--- `text`: string — The input string to do text replacements for.
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance — The actor to use for replacements like `%Name` and `%Faction`.
--- @return string result No description yet available.
function tes3.applyTextDefines(params) end

---Table parameter definitions for `tes3.applyTextDefines`.
--- @class tes3.applyTextDefines.params
--- @field text string The input string to do text replacements for.
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance The actor to use for replacements like `%Name` and `%Faction`.

--- Calculates the actual charge use of an enchantment by a mobile actor, after skills are applied. Invokes the enchantChargeUse event to account for modded charge usage. Takes into account the MCP charge use rebalance patch, if activated.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3calculatechargeuse).
--- @param params tes3.calculateChargeUse.params This table accepts the following values:
--- 
--- `mobile`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer — The mobile actor that would be casting the enchantment.
--- 
--- `enchantment`: tes3enchantment — The enchantment to check.
--- @return number chargeUse Actual charge use.
function tes3.calculateChargeUse(params) end

---Table parameter definitions for `tes3.calculateChargeUse`.
--- @class tes3.calculateChargeUse.params
--- @field mobile tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer The mobile actor that would be casting the enchantment.
--- @field enchantment tes3enchantment The enchantment to check.

--- Calculates a price, given a merchant and associated trading data. This is useful beyond accessing the object's `.value` field in that it raises the appropriate events to let other mods modify the values.
--- @param params tes3.calculatePrice.params This table accepts the following values:
--- 
--- `object`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon|nil — *Optional*. The object to calculate the price for. If not provided, `basePrice` is required.
--- 
--- `basePrice`: number? — *Optional*. The base price to calculate the end price for. This defaults to the `object` param's `value`, if provided. This parameter is required if `object` is not provided.
--- 
--- `buying`: boolean? — *Default*: `true`. If `true`, uses the logic for buying a service/item. This is exclusive with `selling`.
--- 
--- `selling`: boolean? — *Default*: `false`. If `true`, uses the logic for selling an item. This is exclusive with `buying`.
--- 
--- `merchant`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer — The merchant to use for calculating the price.
--- 
--- `bartering`: boolean? — *Default*: `false`. If `true`, a [calcBarterPrice](https://mwse.github.io/MWSE/events/calcBarterPrice) or [calcRepairPrice](https://mwse.github.io/MWSE/events/calcRepairPrice) event will be triggered.
--- 
--- `repairing`: boolean? — *Default*: `false`. If `true`, a [calcRepairPrice](https://mwse.github.io/MWSE/events/calcRepairPrice) event will be triggered.
--- 
--- `training`: boolean? — *Default*: `false`. If `true`, a [calcTrainingPrice](https://mwse.github.io/MWSE/events/calcTrainingPrice) event will be triggered, passing the given `skill` ID.
--- 
--- `count`: number? — *Default*: `1`. If `bartering`, the count passed to the [calcBarterPrice](https://mwse.github.io/MWSE/events/calcBarterPrice) event.
--- 
--- `itemData`: tes3itemData? — *Optional*. If `bartering` or `repairing`, the item data passed to the [calcBarterPrice](https://mwse.github.io/MWSE/events/calcBarterPrice) or [calcRepairPrice](https://mwse.github.io/MWSE/events/calcRepairPrice) event.
--- 
--- `skill`: number — If `training`, the skill ID passed to the [calcTrainingPrice](https://mwse.github.io/MWSE/events/calcTrainingPrice) event. Maps to value in [`tes3.skill`](https://mwse.github.io/MWSE/references/skills/) table.
--- @return number price The calculated price, filtered by events.
function tes3.calculatePrice(params) end

---Table parameter definitions for `tes3.calculatePrice`.
--- @class tes3.calculatePrice.params
--- @field object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon|nil *Optional*. The object to calculate the price for. If not provided, `basePrice` is required.
--- @field basePrice number? *Optional*. The base price to calculate the end price for. This defaults to the `object` param's `value`, if provided. This parameter is required if `object` is not provided.
--- @field buying boolean? *Default*: `true`. If `true`, uses the logic for buying a service/item. This is exclusive with `selling`.
--- @field selling boolean? *Default*: `false`. If `true`, uses the logic for selling an item. This is exclusive with `buying`.
--- @field merchant tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer The merchant to use for calculating the price.
--- @field bartering boolean? *Default*: `false`. If `true`, a [calcBarterPrice](https://mwse.github.io/MWSE/events/calcBarterPrice) or [calcRepairPrice](https://mwse.github.io/MWSE/events/calcRepairPrice) event will be triggered.
--- @field repairing boolean? *Default*: `false`. If `true`, a [calcRepairPrice](https://mwse.github.io/MWSE/events/calcRepairPrice) event will be triggered.
--- @field training boolean? *Default*: `false`. If `true`, a [calcTrainingPrice](https://mwse.github.io/MWSE/events/calcTrainingPrice) event will be triggered, passing the given `skill` ID.
--- @field count number? *Default*: `1`. If `bartering`, the count passed to the [calcBarterPrice](https://mwse.github.io/MWSE/events/calcBarterPrice) event.
--- @field itemData tes3itemData? *Optional*. If `bartering` or `repairing`, the item data passed to the [calcBarterPrice](https://mwse.github.io/MWSE/events/calcBarterPrice) or [calcRepairPrice](https://mwse.github.io/MWSE/events/calcRepairPrice) event.
--- @field skill number If `training`, the skill ID passed to the [calcTrainingPrice](https://mwse.github.io/MWSE/events/calcTrainingPrice) event. Maps to value in [`tes3.skill`](https://mwse.github.io/MWSE/references/skills/) table.

--- Returns `true` if the `target` actor can cast spells, otherwise returns `false`.
--- @param params tes3.canCastSpells.params This table accepts the following values:
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance — The actor to check.
--- @return boolean result No description yet available.
function tes3.canCastSpells(params) end

---Table parameter definitions for `tes3.canCastSpells`.
--- @class tes3.canCastSpells.params
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance The actor to check.

--- Signals looping animations on the actor to stop looping and play to the end. The animation will continue, playing past the loop point until the end frame. Useful for exiting looping animations cleanly.
--- @param params tes3.cancelAnimationLoop.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference to the actor.
function tes3.cancelAnimationLoop(params) end

---Table parameter definitions for `tes3.cancelAnimationLoop`.
--- @class tes3.cancelAnimationLoop.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference to the actor.

--- This function returns true if player can rest.
--- @param params tes3.canRest.params This table accepts the following values:
--- 
--- `checkForEnemies`: boolean? — *Default*: `true`. Perform a check whether there are enemies nearby before opening rest menu. If there are, false is returned.
--- 
--- `checkForSolidGround`: boolean? — *Default*: `true`. Perform a check if the player is underwater. If underwater, false is returned.
--- 
--- `showMessage`: boolean? — *Default*: `false`. If true, a messagebox will be shown if the player can't rest because some condition isn't met.
--- @return boolean canRest No description yet available.
function tes3.canRest(params) end

---Table parameter definitions for `tes3.canRest`.
--- @class tes3.canRest.params
--- @field checkForEnemies boolean? *Default*: `true`. Perform a check whether there are enemies nearby before opening rest menu. If there are, false is returned.
--- @field checkForSolidGround boolean? *Default*: `true`. Perform a check if the player is underwater. If underwater, false is returned.
--- @field showMessage boolean? *Default*: `false`. If true, a messagebox will be shown if the player can't rest because some condition isn't met.

--- Casts a spell from a given reference to a target reference. Touch effects will hit the target at any range, while target effects will create a projectile. By default, the spell always casts successfully and does not consume magicka. By default, an actor casting will stop and perform its cast animation, but the 'instant' flag can start the cast instantly and allows more control over the spell for NPCs.
--- 
--- If the caster is the player, the target parameter is optional; without a target, the player's touch effects will only hit targets in front of them, and target effects will create a projectile in the direction the player is facing.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3cast).
--- @param params tes3.cast.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The caster reference.
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The target reference. Optional only if the caster is the player.
--- 
--- `spell`: tes3spell|string — The spell the caster uses.
--- 
--- `instant`: boolean? — *Default*: `false`. If `true`, the spell is cast instantly. No animation is performed.
--- 
--- `alwaysSucceeds`: boolean? — *Default*: `true`. If `true`, the spell cannot fail and does not consume magicka. If `false`, it is cast using the actor's spell skill, and requires and takes enough magicka to cast. For NPCs, this only applies if `instant` is `true`.
--- 
--- `bypassResistances`: boolean? — *Default*: `false`. If `true`, the spell will bypass the target's resistances. For NPCs, this only applies if `instant` is `true`.
--- @return boolean success Returns `true` if the spell was cast successfully. Returns `false` if `instant` is `false` and the player is trying to cast the spell, while being unable to cast spells under normal circumstances.
function tes3.cast(params) end

---Table parameter definitions for `tes3.cast`.
--- @class tes3.cast.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The caster reference.
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The target reference. Optional only if the caster is the player.
--- @field spell tes3spell|string The spell the caster uses.
--- @field instant boolean? *Default*: `false`. If `true`, the spell is cast instantly. No animation is performed.
--- @field alwaysSucceeds boolean? *Default*: `true`. If `true`, the spell cannot fail and does not consume magicka. If `false`, it is cast using the actor's spell skill, and requires and takes enough magicka to cast. For NPCs, this only applies if `instant` is `true`.
--- @field bypassResistances boolean? *Default*: `false`. If `true`, the spell will bypass the target's resistances. For NPCs, this only applies if `instant` is `true`.

--- Checks if a merchant will offer a service to you, including dialogue checks like disposition and faction membership. A specific service can be checked, or if no service is given, a generic dialogue check is made. If the service is refused, the dialogue reply for the refusal may also be returned (it may be nil, as there may not always be a reply available).
--- @param reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.
--- @param service number? *Optional*. The specific service to check for availability. Maps to values in the [`tes3.merchantService`](https://mwse.github.io/MWSE/references/merchant-services/) table.
--- @return boolean offersService No description yet available.
--- @return tes3dialogueInfo refusalReply No description yet available.
function tes3.checkMerchantOffersService(reference, service) end

--- Determines if a merchant trades in a given item.
--- @param params tes3.checkMerchantTradesItem.params This table accepts the following values:
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — No description yet available.
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- @return boolean trades No description yet available.
function tes3.checkMerchantTradesItem(params) end

---Table parameter definitions for `tes3.checkMerchantTradesItem`.
--- @class tes3.checkMerchantTradesItem.params
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string No description yet available.
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.

--- This function is used to claim a unique spell effect name and id. This is needed before actually creating a new effect by calling `tes3.addMagicEffect()`. A claimed effect id is then available as: `tes3.effect.effectName` (just like any other spell effect). For examples of this function in practice see [`tes3.addMagicEffect()`](https://mwse.github.io/MWSE/apis/tes3/#tes3addmagiceffect) example.
--- @param name string The name of the new spell effect. Must be unique. An error will be thrown if it's non-unique.
--- @param id number A unique number representing the new spell effect. An error will be thrown if it's non-unique.
function tes3.claimSpellEffectId(name, id) end

--- This function deletes the player's mark location.
function tes3.clearMarkLocation() end

--- This function closes the alchemy menu.
function tes3.closeAlchemyMenu() end

--- This function closes the contents menu.
--- @return boolean wasClosed If true, the menu was previously open, and is now closed.
function tes3.closeContentsMenu() end

--- This function closes the dialogue menu.
--- @param params tes3.closeDialogueMenu.params This table accepts the following values:
--- 
--- `force`: boolean? — *Default*: `true`. Normally, the menu can't be closed in certain circumstances, such as when the player is making a dialogue choice. If true, these usual restrictions will be ignored.
--- @return boolean wasClosed If true, the menu was previously open, and is now closed.
function tes3.closeDialogueMenu(params) end

---Table parameter definitions for `tes3.closeDialogueMenu`.
--- @class tes3.closeDialogueMenu.params
--- @field force boolean? *Default*: `true`. Normally, the menu can't be closed in certain circumstances, such as when the player is making a dialogue choice. If true, these usual restrictions will be ignored.

--- This function closes the repair service menu.
function tes3.closeRepairServiceMenu() end

--- This function closes the resting menu.
function tes3.closeRestMenu() end

--- This function closes the spellmaking menu.
function tes3.closeSpellmakingMenu() end

--- Creates an object and returns it. The created object will be part of the saved game.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3createobject).
--- @param params tes3.createObject.params This table accepts the following values:
--- 
--- `id`: string? — *Optional*. The id of the new object.
--- 
--- `objectType`: number — The type of object to create. Maps to values in the [`tes3.objectType`](https://mwse.github.io/MWSE/references/object-types/) table. Supported object types are:
--- --- 		- `tes3.objectType.activator`
--- --- 		- `tes3.objectType.alchemy`
--- --- 		- `tes3.objectType.armor`
--- --- 		- `tes3.objectType.book`
--- --- 		- `tes3.objectType.clothing`
--- --- 		- `tes3.objectType.container`
--- --- 		- `tes3.objectType.enchantment`
--- --- 		- `tes3.objectType.misc`
--- --- 		- `tes3.objectType.sound`
--- --- 		- `tes3.objectType.spell`
--- --- 		- `tes3.objectType.static`
--- --- 		- `tes3.objectType.weapon`
--- --- 
--- 
--- `getIfExists`: boolean? — *Default*: `true`. If `true`, an existing object of the same `objectType` and `id` will be returned instead of creating a new one.
--- @return tes3activator|tes3alchemy|tes3armor|tes3book|tes3clothing|tes3container|tes3enchantment|tes3misc|tes3sound|tes3spell|tes3static|tes3weapon createdObject No description yet available.
function tes3.createObject(params) end

---Table parameter definitions for `tes3.createObject`.
--- @class tes3.createObject.params
--- @field id string? *Optional*. The id of the new object.
--- @field objectType number The type of object to create. Maps to values in the [`tes3.objectType`](https://mwse.github.io/MWSE/references/object-types/) table. Supported object types are:
--- 		- `tes3.objectType.activator`
--- 		- `tes3.objectType.alchemy`
--- 		- `tes3.objectType.armor`
--- 		- `tes3.objectType.book`
--- 		- `tes3.objectType.clothing`
--- 		- `tes3.objectType.container`
--- 		- `tes3.objectType.enchantment`
--- 		- `tes3.objectType.misc`
--- 		- `tes3.objectType.sound`
--- 		- `tes3.objectType.spell`
--- 		- `tes3.objectType.static`
--- 		- `tes3.objectType.weapon`
--- 
--- @field getIfExists boolean? *Default*: `true`. If `true`, an existing object of the same `objectType` and `id` will be returned instead of creating a new one.

--- Similar to mwscript's PlaceAtPC or PlaceAtMe, this creates a new reference in the game world.
--- @param params tes3.createReference.params This table accepts the following values:
--- 
--- `object`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string — The object to create a reference of.
--- 
--- `position`: tes3vector3|table — The location to create the reference at.
--- 
--- `orientation`: tes3vector3|table — The new orientation for the created reference.
--- 
--- `cell`: tes3cell|string|table|nil — *Optional*. The cell to create the reference in. This is only needed for interior cells.
--- 
--- `scale`: number? — *Default*: `1`. A scale for the reference.
--- @return tes3reference newReference No description yet available.
function tes3.createReference(params) end

---Table parameter definitions for `tes3.createReference`.
--- @class tes3.createReference.params
--- @field object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string The object to create a reference of.
--- @field position tes3vector3|table The location to create the reference at.
--- @field orientation tes3vector3|table The new orientation for the created reference.
--- @field cell tes3cell|string|table|nil *Optional*. The cell to create the reference in. This is only needed for interior cells.
--- @field scale number? *Default*: `1`. A scale for the reference.

--- Creates an arbitrary and automatically tracked visual effect. Most VFX assignments are persistent, and only expire when their lifespan ends, an associated reference is destroyed, or a given spell serial is retired.
--- @param params tes3.createVisualEffect.params This table accepts the following values:
--- 
--- `object`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil — *Optional*. The physical object to use as the VFX. To use an enchantment-style VFX, supply the magicEffectId parameter instead.
--- 
--- `serial`: number? — *Optional*. An associated tes3magicSourceInstance serial. If a serial is assigned to the VFX, the effect expiring will also remove the VFX. This is not used when creating an enchantment-style VFX.
--- 
--- `repeatCount`: number? — *Optional*. A repeat count for the VFX. If provided, the key timing for the associated effect will be used, multiplied by this value, to determine the total lifespan of the VFX. This is not used when creating an enchantment-style VFX.
--- 
--- `lifespan`: number? — *Optional*. The desired lifespan for the VFX. If not provided, the VFX will never die of old age.
--- 
--- `scale`: number? — *Default*: `1`. The scale used to resize the given VFX. The default value will match the size used by most magical effect logic. This is not used when creating an enchantment-style VFX.
--- 
--- `verticalOffset`: number? — *Default*: `0`. This offset will be used to position it above its anchor reference. This is not used when creating an enchantment-style VFX.
--- 
--- `position`: tes3vector3|table|nil — *Optional*. If provided the VFX will be attached relative to a position, and not follow a reference.
--- 
--- `avObject`: niAmbientLight|niBillboardNode|niCamera|niCollisionSwitch|niDirectionalLight|niNode|niParticles|niPointLight|niRotatingParticles|niSpotLight|niSwitchNode|niTextureEffect|niTriShape|nil — *Optional*. 
--- 
--- `magicEffectId`: number? — *Optional*. The magic effect ID to use to create an enchantment-style VFX. This will use most of the same VFX logic, but cannot be applied to a position or specific niAVObject.
--- @return tes3vfx vfx A handle to the VFX that was created. This can be passed to `tes3.removeVisualEffect` to remove it from the reference.
function tes3.createVisualEffect(params) end

---Table parameter definitions for `tes3.createVisualEffect`.
--- @class tes3.createVisualEffect.params
--- @field object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string|nil *Optional*. The physical object to use as the VFX. To use an enchantment-style VFX, supply the magicEffectId parameter instead.
--- @field serial number? *Optional*. An associated tes3magicSourceInstance serial. If a serial is assigned to the VFX, the effect expiring will also remove the VFX. This is not used when creating an enchantment-style VFX.
--- @field repeatCount number? *Optional*. A repeat count for the VFX. If provided, the key timing for the associated effect will be used, multiplied by this value, to determine the total lifespan of the VFX. This is not used when creating an enchantment-style VFX.
--- @field lifespan number? *Optional*. The desired lifespan for the VFX. If not provided, the VFX will never die of old age.
--- @field scale number? *Default*: `1`. The scale used to resize the given VFX. The default value will match the size used by most magical effect logic. This is not used when creating an enchantment-style VFX.
--- @field verticalOffset number? *Default*: `0`. This offset will be used to position it above its anchor reference. This is not used when creating an enchantment-style VFX.
--- @field position tes3vector3|table|nil *Optional*. If provided the VFX will be attached relative to a position, and not follow a reference.
--- @field avObject niAmbientLight|niBillboardNode|niCamera|niCollisionSwitch|niDirectionalLight|niNode|niParticles|niPointLight|niRotatingParticles|niSpotLight|niSwitchNode|niTextureEffect|niTriShape|nil *Optional*. 
--- @field magicEffectId number? *Optional*. The magic effect ID to use to create an enchantment-style VFX. This will use most of the same VFX logic, but cannot be applied to a position or specific niAVObject.

--- Decreases player's kill count of a certain type of actor by one.
--- @param params tes3.decrementKillCount.params This table accepts the following values:
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string — The actor (or their ID).
function tes3.decrementKillCount(params) end

---Table parameter definitions for `tes3.decrementKillCount`.
--- @class tes3.decrementKillCount.params
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string The actor (or their ID).

--- Deletes a game object from the system. This can be dangerous, use with caution.
--- @param object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon The object to delete.
function tes3.deleteObject(object) end

--- Disables the use of a keyboard key.
--- @param keyCode number Maps to values in [`tes3.scanCode`](https://mwse.github.io/MWSE/references/scan-codes/) namespace.
function tes3.disableKey(keyCode) end

--- Drops one or more items from a reference's inventory onto the ground at their feet. It will unequip the item if it is equipped. The return value will be nil if no matching item was found.
--- @param params tes3.dropItem.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference whose inventory will be modified.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — The item to drop.
--- 
--- `itemData`: tes3itemData? — *Optional*. The item data of the specific item to drop. Without this, the first matching item in the inventory will drop.
--- 
--- `matchNoItemData`: boolean? — *Default*: `false`. If true, matches an item without item data. This can be used when you want to drop an item that isn't equipped (equipped items always have item data).
--- 
--- `count`: number? — *Default*: `1`. The number of items to drop.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If false, the player or contents menu won't be updated.
--- @return tes3reference createdReference No description yet available.
function tes3.dropItem(params) end

---Table parameter definitions for `tes3.dropItem`.
--- @class tes3.dropItem.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference whose inventory will be modified.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string The item to drop.
--- @field itemData tes3itemData? *Optional*. The item data of the specific item to drop. Without this, the first matching item in the inventory will drop.
--- @field matchNoItemData boolean? *Default*: `false`. If true, matches an item without item data. This can be used when you want to drop an item that isn't equipped (equipped items always have item data).
--- @field count number? *Default*: `1`. The number of items to drop.
--- @field updateGUI boolean? *Default*: `true`. If false, the player or contents menu won't be updated.

--- Enables the use of a keyboard key.
--- @param keyCode number Maps to values in [`tes3.scanCode`](https://mwse.github.io/MWSE/references/scan-codes/) namespace.
function tes3.enableKey(keyCode) end

--- Similar to the vanilla FadeIn mwscript command.
--- @param params tes3.fadeIn.params? This table accepts the following values:
--- 
--- `fader`: tes3fader? — *Optional*. Defaults to the transition fader.
--- 
--- `duration`: number? — *Default*: `1.0`. Time, in seconds, for the fade.
function tes3.fadeIn(params) end

---Table parameter definitions for `tes3.fadeIn`.
--- @class tes3.fadeIn.params
--- @field fader tes3fader? *Optional*. Defaults to the transition fader.
--- @field duration number? *Default*: `1.0`. Time, in seconds, for the fade.

--- Similar to the vanilla FadeOut mwscript command.
--- @param params tes3.fadeOut.params? This table accepts the following values:
--- 
--- `fader`: tes3fader? — *Optional*. Defaults to the transition fader.
--- 
--- `duration`: number? — *Default*: `1.0`. Time, in seconds, for the fade.
function tes3.fadeOut(params) end

---Table parameter definitions for `tes3.fadeOut`.
--- @class tes3.fadeOut.params
--- @field fader tes3fader? *Optional*. Defaults to the transition fader.
--- @field duration number? *Default*: `1.0`. Time, in seconds, for the fade.

--- Similar to the vanilla FadeTo mwscript command.
--- @param params tes3.fadeTo.params? This table accepts the following values:
--- 
--- `fader`: tes3fader? — *Optional*. Defaults to the transition fader.
--- 
--- `duration`: number? — *Default*: `1.0`. Time, in seconds, for the fade.
--- 
--- `value`: number? — *Default*: `1.0`. No description yet available.
function tes3.fadeTo(params) end

---Table parameter definitions for `tes3.fadeTo`.
--- @class tes3.fadeTo.params
--- @field fader tes3fader? *Optional*. Defaults to the transition fader.
--- @field duration number? *Default*: `1.0`. Time, in seconds, for the fade.
--- @field value number? *Default*: `1.0`. No description yet available.

--- Searches for active mobile actors which are within `range` distance from the `reference` or `position` argument. It only finds mobiles which have active AI, and can include the player. This function is used by the game for area-of-effect hits. It has a small amount of overhead, so try not to use it too much.
--- @param params tes3.findActorsInProximity.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Optional*. The position to search from, taken from a reference. Uses the position of the centre of the body if the reference is an actor.
--- 
--- `position`: tes3vector3? — *Optional*. The position to search from.
--- 
--- `range`: number — The distance around the position to search. An actor is included if the centre of their body is in range.
--- @return tes3mobileActor[]|tes3mobileCreature[]|tes3mobileNPC[]|tes3mobilePlayer[] mobileList No description yet available.
function tes3.findActorsInProximity(params) end

---Table parameter definitions for `tes3.findActorsInProximity`.
--- @class tes3.findActorsInProximity.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Optional*. The position to search from, taken from a reference. Uses the position of the centre of the body if the reference is an actor.
--- @field position tes3vector3? *Optional*. The position to search from.
--- @field range number The distance around the position to search. An actor is included if the centre of their body is in range.

--- Fetches the core game birthsign object for a given birthsign ID. If the birthsign with a given ID doesn't exist, nil is returned.
--- @param id string ID of the birthsign to search for.
--- @return tes3birthsign birthsign No description yet available.
function tes3.findBirthsign(id) end

--- Fetches the core game character class object for a given class ID. If the class with a given ID doesn't exist, nil is returned.
--- @param id string ID of the class to search for.
--- @return tes3class class No description yet available.
function tes3.findClass(id) end

--- Using the same engine function used by the vanilla intervention spells, locations the first reference of a given object in the exterior world.
--- @param params tes3.findClosestExteriorReferenceOfObject.params This table accepts the following values:
--- 
--- `object`: tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string — The object to search for.
--- 
--- `position`: tes3vector3? — *Optional*. The position to search from. Must be an exterior position. Defaults to the last exterior position of the player if no position is provided.
--- @return tes3reference reference No description yet available.
function tes3.findClosestExteriorReferenceOfObject(params) end

---Table parameter definitions for `tes3.findClosestExteriorReferenceOfObject`.
--- @class tes3.findClosestExteriorReferenceOfObject.params
--- @field object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3repairTool|tes3static|tes3weapon|string The object to search for.
--- @field position tes3vector3? *Optional*. The position to search from. Must be an exterior position. Defaults to the last exterior position of the player if no position is provided.

--- Locates a root dialogue topic that can then be filtered down for a specific actor to return a specific dialogue info. Specify either `topic`, or both `type` and `page` for other types of dialogue.
--- 
--- For example, `tes3.findDialogue({type = tes3.dialogueType.greeting, page = tes3.dialoguePage.greeting.greeting0})` will return the "Greeting 0" topic, which is not available using a topic ID.
--- @param params tes3.findDialogue.params This table accepts the following values:
--- 
--- `topic`: string? — *Optional*. The dialogue topic to look for.
--- 
--- `type`: number? — *Optional*. The type of dialogue to look for. Uses [`tes3.dialogueType`](https://mwse.github.io/MWSE/references/dialogue-types/) constants.
--- 
--- `page`: number? — *Optional*. The page of dialogue to fetch. Uses [`tes3.dialoguePage`](https://mwse.github.io/MWSE/references/dialogue-pages/) constants.
--- @return tes3dialogue dialogue No description yet available.
function tes3.findDialogue(params) end

---Table parameter definitions for `tes3.findDialogue`.
--- @class tes3.findDialogue.params
--- @field topic string? *Optional*. The dialogue topic to look for.
--- @field type number? *Optional*. The type of dialogue to look for. Uses [`tes3.dialogueType`](https://mwse.github.io/MWSE/references/dialogue-types/) constants.
--- @field page number? *Optional*. The page of dialogue to fetch. Uses [`tes3.dialoguePage`](https://mwse.github.io/MWSE/references/dialogue-pages/) constants.

--- Fetches the core game object that represents a global variable.
--- @param id string No description yet available.
--- @return tes3globalVariable globalVariable No description yet available.
function tes3.findGlobal(id) end

--- Fetches the core game object that represents a game setting. While this function accepts a name, it is recommended to use the [`tes3.GMST`](https://mwse.github.io/MWSE/references/gmst/) constants.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3findgmst).
--- @param id number|string No description yet available.
--- @return tes3gameSetting gameSetting No description yet available.
function tes3.findGMST(id) end

--- Fetches the core game region object for a given region ID. If the region with a given ID doesn't exist, nil is returned.
--- @param params tes3.findRegion.params This table accepts the following values:
--- 
--- `id`: string — ID of the region to search for.
--- @return tes3region region No description yet available.
function tes3.findRegion(params) end

---Table parameter definitions for `tes3.findRegion`.
--- @class tes3.findRegion.params
--- @field id string ID of the region to search for.

--- Forces the player's POV to first person the next simulation frame, and returns true if the POV has been changed.
--- @return boolean changedPOV No description yet available.
function tes3.force1stPerson() end

--- Forces the player's POV to third person the next simulation frame, and returns true if the POV has been changed.
--- @return boolean changedPOV No description yet available.
function tes3.force3rdPerson() end

--- Returns the camera offset from the player's head while in 3rd person view.
--- 
--- !!! tip
--- 	If used before initialized event, this function returns empty table.
--- @return tes3vector3 cameraOffset No description yet available.
function tes3.get3rdPersonCameraOffset() end

--- Returns a table of active cells. If indoors, the table will have only one entry. If outdoors, the 9 surrounding cells will be provided.
--- @return tes3cell[] cells No description yet available.
function tes3.getActiveCells() end

--- This function fetches a reference's attached animation groups.
--- @param params tes3.getAnimationGroups.params This table accepts the following values:
--- 
--- `reference`: tes3reference — A reference whose animation groups to fetch.
--- @return number[] animData No description yet available.
function tes3.getAnimationGroups(params) end

---Table parameter definitions for `tes3.getAnimationGroups`.
--- @class tes3.getAnimationGroups.params
--- @field reference tes3reference A reference whose animation groups to fetch.

--- This function fetches a reference's attached animation groups' timings.
--- @param params tes3.getAnimationTiming.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — A reference whose animation groups' timings to fetch.
--- @return number[] result No description yet available.
function tes3.getAnimationTiming(params) end

---Table parameter definitions for `tes3.getAnimationTiming`.
--- @class tes3.getAnimationTiming.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string A reference whose animation groups' timings to fetch.

--- Returns a 1-indexed table of active archives.
--- @return tes3archive[] archives No description yet available.
function tes3.getArchiveList() end

--- Fetches an attachment with a given type from a reference. Will return `nil` if no attachment of that type has been found.
--- @param reference tes3reference The reference to get the attachment from.
--- @param attachment string The type of attachment to get. Possible values are:
--- 	- `"bodyPartManager"`: Returns `tes3bodyPartManager`
--- 	- `"light"`: Returns `tes3lightNode`
--- 	- `"lock"`: Returns `tes3lockNode`
--- 	- `"leveledBase"`: Returns `tes3reference`
--- 	- `"travelDestination"`: Returns `tes3travelDestinationNode`
--- 	- `"variables"`: Returns `tes3itemData`
--- 	- `"actor"`: Returns `tes3mobileActor`
--- 	- `"animation"`: Returns `tes3animationData`
--- 
--- @return nil|tes3bodyPartManager|tes3itemData|tes3lightNode|tes3lockNode|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|tes3travelDestinationNode|tes3animationData result No description yet available.
function tes3.getAttachment(reference, attachment) end

--- Returns the lowercase identifying name of an attribute for a given numerical, 0-based index. E.g. "strength", by using GMSTs. Uses `tes3.attributeName` enumeration as a fallback.
--- @param attributeId number The attribute id to get the name of. Maps to values in [`tes3.attribute`](https://mwse.github.io/MWSE/references/attributes/) namespace.
--- @return string name No description yet available.
function tes3.getAttributeName(attributeId) end

--- Returns the camera's position.
--- @return tes3vector3 vector3 No description yet available.
function tes3.getCameraPosition() end

--- Returns the camera look vector.
--- @return tes3vector3 vector3 No description yet available.
function tes3.getCameraVector() end

--- Finds a cell, either by an id or an X/Y grid position.
--- @param params tes3.getCell.params This table accepts the following values:
--- 
--- `id`: string — The cell's ID. If not provided, x and y must be.
--- 
--- `x`: number — No description yet available.
--- 
--- `y`: number — No description yet available.
--- @return tes3cell cell No description yet available.
function tes3.getCell(params) end

---Table parameter definitions for `tes3.getCell`.
--- @class tes3.getCell.params
--- @field id string The cell's ID. If not provided, x and y must be.
--- @field x number No description yet available.
--- @field y number No description yet available.

--- Gets the number of days that have passed leading up to the start of a given month.
--- @param month number The 0-based month index.
--- @return number days No description yet available.
function tes3.getCumulativeDaysForMonth(month) end

--- Returns an actor's current AI package ID, just as the mwscript function `GetCurrentAIPackage` would.
--- @param reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference No description yet available.
--- @return number packageID No description yet available.
function tes3.getCurrentAIPackageId(reference) end

--- Gets the currently active weather, from the player's current region.
--- @return tes3weatherAsh|tes3weatherBlight|tes3weatherBlizzard|tes3weatherClear|tes3weatherCloudy|tes3weatherFoggy|tes3weatherOvercast|tes3weatherRain|tes3weatherSnow|tes3weatherThunder weather No description yet available.
function tes3.getCurrentWeather() end

--- Returns a table with values x and y that contain the current cursor position.
--- @return tes3vector2 position No description yet available.
function tes3.getCursorPosition() end

--- Returns the number of days in a given month. This may be altered if a Morrowind Code Patch feature was installed.
--- @param month number No description yet available.
--- @return number dayCount No description yet available.
function tes3.getDaysInMonth(month) end

--- Locates and returns a Dialogue Info by a given id. This involves file IO and is an expensive call. Results should be cached.
--- @param dialogue tes3dialogue|string The dialogue that the info belongs to.
--- @param id string The numerical, unique id for the info object.
--- @return tes3dialogueInfo dialogueInfo No description yet available.
function tes3.getDialogueInfo(dialogue, id) end

--- This function returns the total effective magnitude and total base magnitude of a certain magic effect affecting a reference. It returns a pair of numbers, the first being the effective magnitude after all the actor's resistances are applied (see examples). The second number is the magnitude before any of the actor's resistances are applied.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3geteffectmagnitude).
--- @param params tes3.getEffectMagnitude.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — An associated mobile should exist for this function to be able to work.
--- 
--- `effect`: number — Effect ID. Can be any of the predefined spell effects, or one added by `tes3.claimSpellEffectId()`. Maps to values of [`tes3.effect`](https://mwse.github.io/MWSE/references/magic-effects/) constants
--- 
--- `skill`: number? — *Default*: `-1`. If effect parameter specified is: Absorb, Damage, Drain, Fortify or Restore Skill, a skill should be provided. This also applies to any custom spell effect which operates on a certain skill. This value maps to [`tes3.skill`](https://mwse.github.io/MWSE/references/skills/) constants.
--- 
--- `attribute`: number? — *Default*: `-1`. If effect parameter specified is: Absorb, Damage, Drain, Fortify or Restore Attribute, an attribute should be provided. This also applies to any custom spell effect which operates on a certain attribute. This value maps to [`tes3.attribute`](https://mwse.github.io/MWSE/references/attributes/) constants.
--- @return number effectiveMagnitude The effective magnitude after all the actor's resistances are applied.
--- @return integer magnitude The magnitude before any of the actor's resistances are applied.
function tes3.getEffectMagnitude(params) end

---Table parameter definitions for `tes3.getEffectMagnitude`.
--- @class tes3.getEffectMagnitude.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string An associated mobile should exist for this function to be able to work.
--- @field effect number Effect ID. Can be any of the predefined spell effects, or one added by `tes3.claimSpellEffectId()`. Maps to values of [`tes3.effect`](https://mwse.github.io/MWSE/references/magic-effects/) constants
--- @field skill number? *Default*: `-1`. If effect parameter specified is: Absorb, Damage, Drain, Fortify or Restore Skill, a skill should be provided. This also applies to any custom spell effect which operates on a certain skill. This value maps to [`tes3.skill`](https://mwse.github.io/MWSE/references/skills/) constants.
--- @field attribute number? *Default*: `-1`. If effect parameter specified is: Absorb, Damage, Drain, Fortify or Restore Attribute, an attribute should be provided. This also applies to any custom spell effect which operates on a certain attribute. This value maps to [`tes3.attribute`](https://mwse.github.io/MWSE/references/attributes/) constants.

--- Returns an actor's equipped item stack, provided a given filter
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3getequippeditem).
--- @param params tes3.getEquippedItem.params This table accepts the following values:
--- 
--- `actor`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance — No description yet available.
--- 
--- `enchanted`: boolean? — *Optional*. If true, filters only enchanted items.
--- 
--- `objectType`: number? — *Optional*. Maps to [`tes3.objectType`](https://mwse.github.io/MWSE/references/object-types/) constants. Used to filter equipment by type.
--- 
--- `slot`: number? — *Optional*. Maps to [`tes3.armorSlot`](https://mwse.github.io/MWSE/references/armor-slots/) or [`tes3.clothingSlot`](https://mwse.github.io/MWSE/references/clothing-slots/). Used to filter equipment by slot.
--- 
--- `type`: number? — *Optional*. Maps to [`tes3.weaponType`](https://mwse.github.io/MWSE/references/weapon-types/). Used to filter equipment by type.
--- @return tes3equipmentStack stack No description yet available.
function tes3.getEquippedItem(params) end

---Table parameter definitions for `tes3.getEquippedItem`.
--- @class tes3.getEquippedItem.params
--- @field actor tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance No description yet available.
--- @field enchanted boolean? *Optional*. If true, filters only enchanted items.
--- @field objectType number? *Optional*. Maps to [`tes3.objectType`](https://mwse.github.io/MWSE/references/object-types/) constants. Used to filter equipment by type.
--- @field slot number? *Optional*. Maps to [`tes3.armorSlot`](https://mwse.github.io/MWSE/references/armor-slots/) or [`tes3.clothingSlot`](https://mwse.github.io/MWSE/references/clothing-slots/). Used to filter equipment by slot.
--- @field type number? *Optional*. Maps to [`tes3.weaponType`](https://mwse.github.io/MWSE/references/weapon-types/). Used to filter equipment by type.

--- Fetches the core game faction object for a given faction ID.
--- @param id string No description yet available.
--- @return tes3faction faction No description yet available.
function tes3.getFaction(id) end

--- Determines if a file exists in the user's Data Files.
--- @param path string No description yet available.
--- @return boolean exists No description yet available.
function tes3.getFileExists(path) end

--- Determines if a file exists on the filesystem or inside of a bsa. The returned string will be "file" or "bsa".
--- @param path string No description yet available.
--- @return string exists No description yet available.
function tes3.getFileSource(path) end

--- Retrieves the value of a global value, or nil if the global could not be found.
--- @param id string No description yet available.
--- @return number value No description yet available.
function tes3.getGlobal(id) end

--- Gets the input configuration for a given keybind.
--- @param keybind number Maps to [`tes3.keybind`](https://mwse.github.io/MWSE/references/keybinds/) constants.
--- @return tes3inputConfig inputConfig No description yet available.
function tes3.getInputBinding(keybind) end

--- Returns the amount of a certain item that can be found in a reference's inventory.
--- @param params tes3.getItemCount.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to get the item count for. Must be a reference that has an inventory.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — The item to get the count of.
--- @return number count The absolute value of the stack count in the reference's inventory.
function tes3.getItemCount(params) end

---Table parameter definitions for `tes3.getItemCount`.
--- @class tes3.getItemCount.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to get the item count for. Must be a reference that has an inventory.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string The item to get the count of.

--- This function checks item's stolen flag.
--- @param params tes3.getItemIsStolen.params This table accepts the following values:
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon — The item to check.
--- 
--- `from`: tes3creature|tes3npc|tes3faction|nil — *Optional*. Where the item was stolen from. If not provided, the function will return true if the item was stolen from anyone.
--- @return boolean isStolen If true the item is stolen.
--- @return tes3creature[]|tes3npc[]|tes3faction[] stolenFrom A list of who and what the item has been stolen from.
function tes3.getItemIsStolen(params) end

---Table parameter definitions for `tes3.getItemIsStolen`.
--- @class tes3.getItemIsStolen.params
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon The item to check.
--- @field from tes3creature|tes3npc|tes3faction|nil *Optional*. Where the item was stolen from. If not provided, the function will return true if the item was stolen from anyone.

--- Gets the index of a given journal, or nil if no valid journal could be found.
--- @param params tes3.getJournalIndex.params This table accepts the following values:
--- 
--- `id`: tes3dialogue|string — No description yet available.
--- @return number index No description yet available.
function tes3.getJournalIndex(params) end

---Table parameter definitions for `tes3.getJournalIndex`.
--- @class tes3.getJournalIndex.params
--- @field id tes3dialogue|string No description yet available.

--- Returns how many times the player killed an actor. If no actor is specified, total number of kills player commited will be returned.
--- @param params tes3.getKillCount.params? This table accepts the following values:
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string|nil — *Optional*. The actor (or their ID) for whom to retrieve player's kill count.
--- @return number count No description yet available.
function tes3.getKillCount(params) end

---Table parameter definitions for `tes3.getKillCount`.
--- @class tes3.getKillCount.params
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string|nil *Optional*. The actor (or their ID) for whom to retrieve player's kill count.

--- Returns a table with complete player kill counts. The table returned is formated so actor IDs are table keys and kill count of that type of actor is value.
--- @return table<tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance, number> killMap No description yet available.
function tes3.getKillCounts() end

--- Gets the language as an ISO string (e.g. "eng"), determined by the language entry in Morrowind.ini and the detected executable. Maps to values in the [`tes3.language`](https://mwse.github.io/MWSE/references/languages/) table.
--- @return string result No description yet available.
function tes3.getLanguage() end

--- Gets the language code, determined by the language entry in Morrowind.ini and the detected executable. Maps to values in the [`tes3.languageCode`](https://mwse.github.io/MWSE/references/language-codes/) table.
--- @return number result No description yet available.
function tes3.getLanguageCode() end

--- Returns the last exterior position of the player.
--- @return tes3vector3 vector3 No description yet available.
function tes3.getLastExteriorPosition() end

--- Determines if a given reference is a locked door or container.
--- @param params tes3.getLocked.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- @return boolean isLocked No description yet available.
function tes3.getLocked(params) end

---Table parameter definitions for `tes3.getLocked`.
--- @class tes3.getLocked.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.

--- Gets an locked reference's lock level. If no lock data is available, it will return nil.
--- @param params tes3.getLockLevel.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- @return number level No description yet available.
function tes3.getLockLevel(params) end

---Table parameter definitions for `tes3.getLockLevel`.
--- @class tes3.getLockLevel.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.

--- Fetches the core game Magic Effect object for a given ID.
--- @param id number No description yet available.
--- @return tes3magicEffect magicEffect No description yet available.
function tes3.getMagicEffect(id) end

--- Returns the complex name of a magic effect, taking into account attribute or skill values.
--- @param params tes3.getMagicEffectName.params This table accepts the following values:
--- 
--- `effect`: number — The effect ID to get the name of.
--- 
--- `attribute`: number? — *Optional*. The attribute ID to use, if applicable.
--- 
--- `skill`: number? — *Optional*. The skill ID to use, if applicable.
--- @return string complexName No description yet available.
function tes3.getMagicEffectName(params) end

---Table parameter definitions for `tes3.getMagicEffectName`.
--- @class tes3.getMagicEffectName.params
--- @field effect number The effect ID to get the name of.
--- @field attribute number? *Optional*. The attribute ID to use, if applicable.
--- @field skill number? *Optional*. The skill ID to use, if applicable.

--- Fetches an instance of the magic source of a given serial number.
--- @param params tes3.getMagicSourceInstanceBySerial.params This table accepts the following values:
--- 
--- `serialNumber`: number — No description yet available.
--- @return tes3magicSourceInstance magicSourceInstance No description yet available.
function tes3.getMagicSourceInstanceBySerial(params) end

---Table parameter definitions for `tes3.getMagicSourceInstanceBySerial`.
--- @class tes3.getMagicSourceInstanceBySerial.params
--- @field serialNumber number No description yet available.

--- Fetches the list of the active ESM and ESP files.
--- @return string[] modList No description yet available.
function tes3.getModList() end

--- Fetches the core game object for a given object ID.
--- @param id string No description yet available.
--- @return tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon object No description yet available.
function tes3.getObject(id) end

--- Returns the object's owner, or nil if the object is unowned.
--- @param params tes3.getOwner.params This table accepts the following values:
--- 
--- `reference`: tes3reference — No description yet available.
--- @return tes3faction|tes3npc|nil owner No description yet available.
--- @return number|tes3globalVariable|nil requirement The faction rank required if the owner is a faction, or the global variable needing to be set if the owner is an NPC.
function tes3.getOwner(params) end

---Table parameter definitions for `tes3.getOwner`.
--- @class tes3.getOwner.params
--- @field reference tes3reference No description yet available.

--- This function returns the distance that the player can activate objects with. This is a sum of the iMaxActivateDist GMST value and the player's telekinesis strength.
--- @return number result No description yet available.
function tes3.getPlayerActivationDistance() end

--- Fetches the cell that the player is currently in.
--- @return tes3cell result No description yet available.
function tes3.getPlayerCell() end

--- Returns the position of the player's eyes.
--- @return tes3vector3 position No description yet available.
function tes3.getPlayerEyePosition() end

--- Returns the look direction of the player's eyes.
--- @return tes3vector3 lookDirection No description yet available.
function tes3.getPlayerEyeVector() end

--- Gets the gold count carried by the player.
--- @return number goldCount No description yet available.
function tes3.getPlayerGold() end

--- Deprecated. Use `tes3.player` directly. This function is used to retrieve the player reference.
--- @deprecated
--- @return tes3reference result No description yet available.
function tes3.getPlayerRef() end

--- This function is used to see what the player is looking at. Unlike a real raycast, this does not work in all circumstances. As a general rule, it will return the reference if the information box is shown when it is looked at.
--- @return tes3reference result No description yet available.
function tes3.getPlayerTarget() end

--- This function retrieves data for a quick key.
--- @param params tes3.getQuickKey.params This table accepts the following values:
--- 
--- `slot`: number — The key to retrieve data for. This is a value between 1 and 9.
--- @return tes3quickKey result No description yet available.
function tes3.getQuickKey(params) end

---Table parameter definitions for `tes3.getQuickKey`.
--- @class tes3.getQuickKey.params
--- @field slot number The key to retrieve data for. This is a value between 1 and 9.

--- Fetches the first reference for a given base object ID.
--- @param id string No description yet available.
--- @return tes3reference reference No description yet available.
function tes3.getReference(id) end

--- Gets the current region the player is in. This checks the player's current cell first, but will fall back to the last exterior cell.
--- @param useDoors boolean? *Default*: `false`. No description yet available.
--- @return tes3region region No description yet available.
function tes3.getRegion(useDoors) end

--- Locates and returns a script by a given id.
--- @param id string No description yet available.
--- @return tes3script script No description yet available.
function tes3.getScript(id) end

--- Returns a UNIX-style timestamp based on in-world simulation time since the start of the era, in hours.
--- @return number timestamp No description yet available.
function tes3.getSimulationTimestamp() end

--- Fetches the core game object for a given skill ID.
--- @param id number Maps to [`tes3.skill`](https://mwse.github.io/MWSE/references/skills/) enumeration.
--- @return tes3skill skill No description yet available.
function tes3.getSkill(id) end

--- Returns the identifying name of a skill for a given numerical, 0-based index. E.g. "Enchant".
--- @param skillId number Maps to [`tes3.skill`](https://mwse.github.io/MWSE/references/skills/) enumeration.
--- @return string name No description yet available.
function tes3.getSkillName(skillId) end

--- Locates and returns a sound by a given id.
--- @param id string No description yet available.
--- @return tes3sound sound No description yet available.
function tes3.getSound(id) end

--- Returns a sound generator by a given creature id and type.
--- @param creatureId string No description yet available.
--- @param soundType number Maps to [`tes3.soundGenType`](https://mwse.github.io/MWSE/references/sound-generator-types/) constants.
--- @return tes3soundGenerator soundGenerator No description yet available.
function tes3.getSoundGenerator(creatureId, soundType) end

--- Without a reference, this function returns true if the sound is playing unattached or on any reference. With a reference, it returns true if the sound is playing on that specific reference.
--- @param params tes3.getSoundPlaying.params This table accepts the following values:
--- 
--- `sound`: tes3sound|string — The sound object, or the ID of the sound to look for.
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Optional*. No description yet available.
--- @return boolean soundIsPlaying No description yet available.
function tes3.getSoundPlaying(params) end

---Table parameter definitions for `tes3.getSoundPlaying`.
--- @class tes3.getSoundPlaying.params
--- @field sound tes3sound|string The sound object, or the ID of the sound to look for.
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Optional*. No description yet available.

--- Returns the lowercase identifying name of a specialization type for a given numerical, 0-based index. E.g. "magic", by using GMSTs. Uses `tes3.specializationName` enumeration as a fallback.
--- @param specializationId number Maps to [`tes3.specialization`](https://mwse.github.io/MWSE/references/specializations/) enumeration.
--- @return string name No description yet available.
function tes3.getSpecializationName(specializationId) end

--- Gets the spells of an actor. This can be filtered by `spellType` and set to include or exclude actor, racial and birthsign spells.
--- @param params tes3.getSpells.params This table accepts the following values:
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance — The actor to get the spells of. Must be able to cast spells.
--- 
--- `spellType`: number? — *Default*: `-1`. The spell type to filter for. Only spells with this spell type will be returned. A value of `-1` will return spells of all types. Maps to values in the [`tes3.spellType`](https://mwse.github.io/MWSE/references/spell-types/) table.
--- 
--- `getActorSpells`: boolean? — *Default*: `true`. If `true`, the spells of the actor itself will be included in the result. This includes every spell except racial and birthsign spells.
--- 
--- `getRaceSpells`: boolean? — *Default*: `true`. If `true`, the spells of the actor's race will be included in the result.
--- 
--- `getBirthsignSpells`: boolean? — *Default*: `true`. If `true`, the spells of the actor's birthsign will be included in the result.
--- @return tes3spell[] result No description yet available.
function tes3.getSpells(params) end

---Table parameter definitions for `tes3.getSpells`.
--- @class tes3.getSpells.params
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance The actor to get the spells of. Must be able to cast spells.
--- @field spellType number? *Default*: `-1`. The spell type to filter for. Only spells with this spell type will be returned. A value of `-1` will return spells of all types. Maps to values in the [`tes3.spellType`](https://mwse.github.io/MWSE/references/spell-types/) table.
--- @field getActorSpells boolean? *Default*: `true`. If `true`, the spells of the actor itself will be included in the result. This includes every spell except racial and birthsign spells.
--- @field getRaceSpells boolean? *Default*: `true`. If `true`, the spells of the actor's race will be included in the result.
--- @field getBirthsignSpells boolean? *Default*: `true`. If `true`, the spells of the actor's birthsign will be included in the result.

--- Gets the top-level UI menu.
--- @return tes3uiElement menu No description yet available.
function tes3.getTopMenu() end

--- Gets the trap on a given reference.
--- @param params tes3.getTrap.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- @return tes3spell spell No description yet available.
function tes3.getTrap(params) end

---Table parameter definitions for `tes3.getTrap`.
--- @class tes3.getTrap.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.

--- The function returns true if the player is in the vanity mode. Vanity mode is triggered by a period of inactivity from the player or by a `tes3.setVanityMode()` function. The view is switched to third person (if not already), and the camera is orbiting slowly around the player character.
--- @return boolean result Is the vanity mode currently active?
function tes3.getVanityMode() end

--- Returns both the viewport width and the viewport height. Note that this is the real resolution of the screen. For a value scaled by MGE's menu scaling, see the [same-named function](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uigetviewportsize) in the tes3ui namespace. To get the scale used, check [getViewportScale](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uigetviewportscale) in the tes3ui namespace.
--- @return number width The width of the viewport.
--- @return number height The height of the viewport.
function tes3.getViewportSize() end

--- Returns the number of kills player commited as a Werewolf.
--- @return number werewolfKills No description yet available.
function tes3.getWerewolfKillCount() end

--- Simulates hammering a key.
--- @param keyCode number No description yet available.
function tes3.hammerKey(keyCode) end

--- Attempts to determine if a given Morrowind Code Patch feature is enabled. This may not be possible, in which case nil will be returned.
--- @param id number The id of the feature. Maps to values in [`tes3.codePatchFeature`](https://mwse.github.io/MWSE/references/code-patch-features/) constants.
--- @return boolean|nil state No description yet available.
function tes3.hasCodePatchFeature(id) end

--- Determines if a reference has access to another object, including its inventory. References have access to their own things, and the player has access to dead NPC's items.
--- @param params tes3.hasOwnershipAccess.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Default*: `tes3.player`. The actor to check permissions for.
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to check access of.
--- @return boolean hasAccess No description yet available.
function tes3.hasOwnershipAccess(params) end

---Table parameter definitions for `tes3.hasOwnershipAccess`.
--- @class tes3.hasOwnershipAccess.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Default*: `tes3.player`. The actor to check permissions for.
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to check access of.

--- Determines if the player has access to a given spell.
--- @param params tes3.hasSpell.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to check the spell list of. To check an actor without specifying any particular reference, use `actor` instead.
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string — Who to check the spell list of. Providing a base actor can be done before a save has been loaded, but may not correctly update effects for instanced versions of that actor in an active save.
--- 
--- `spell`: tes3spell|string — The spell to check.
--- @return boolean hasSpell True if the spell exists in the actor's spell list, race spell list, or birthsign spell list.
function tes3.hasSpell(params) end

---Table parameter definitions for `tes3.hasSpell`.
--- @class tes3.hasSpell.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to check the spell list of. To check an actor without specifying any particular reference, use `actor` instead.
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string Who to check the spell list of. Providing a base actor can be done before a save has been loaded, but may not correctly update effects for instanced versions of that actor in an active save.
--- @field spell tes3spell|string The spell to check.

--- Increases player's kill count of a certain type of actor by one.
--- @param params tes3.incrementKillCount.params This table accepts the following values:
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string — The actor (or their ID) for whom to increase player's kill count.
function tes3.incrementKillCount(params) end

---Table parameter definitions for `tes3.incrementKillCount`.
--- @class tes3.incrementKillCount.params
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string The actor (or their ID) for whom to increase player's kill count.

--- Returns true if the game is in 3rd person.
--- @return boolean state No description yet available.
function tes3.is3rdPerson() end

--- This function performs a check whether the provided reference is affected by a certain object or magic effect.
--- 
--- Note `reference.object.spells:contains(spellID)` will give the same output as this function for abilities, diseases, and curses, because having them in your spell list also makes them affect you.
--- @param params tes3.isAffectedBy.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- 
--- `effect`: number? — *Optional*. A numerical identifier of the magic effect to perform a check for. Maps to [`tes3.effect`](https://mwse.github.io/MWSE/references/magic-effects/) constant, including those claimed with `tes3.claimSpellEffectId()`, and then added with `tes3.addMagicEffect()`.
--- 
--- `object`: tes3alchemy|tes3enchantment|tes3spell|tes3magicEffect|string|nil — *Optional*. An object to perform a check for.
--- @return boolean isAffectedBy No description yet available.
function tes3.isAffectedBy(params) end

---Table parameter definitions for `tes3.isAffectedBy`.
--- @class tes3.isAffectedBy.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.
--- @field effect number? *Optional*. A numerical identifier of the magic effect to perform a check for. Maps to [`tes3.effect`](https://mwse.github.io/MWSE/references/magic-effects/) constant, including those claimed with `tes3.claimSpellEffectId()`, and then added with `tes3.addMagicEffect()`.
--- @field object tes3alchemy|tes3enchantment|tes3spell|tes3magicEffect|string|nil *Optional*. An object to perform a check for.

--- Returns `true` if the character generation process has been finished for the current player character.
--- @return boolean result No description yet available.
function tes3.isCharGenFinished() end

--- Compares two key objects and returns their equality. Returns true if the objects are equal, false otherwise.
--- @param params tes3.isKeyEqual.params This table accepts the following values:
--- 
--- `actual`: table — The key object that is being compared.
--- 
--- `expected`: table — The key object that is being compared against.
--- @return boolean equal No description yet available.
function tes3.isKeyEqual(params) end

---Table parameter definitions for `tes3.isKeyEqual`.
--- @class tes3.isKeyEqual.params
--- @field actual table The key object that is being compared.
--- @field expected table The key object that is being compared against.

--- Determines if the player has a given lua mod active. The key passed to this function is the path to where its main.lua file is, relative to the MWSE\\mods folder. Slashes are automatically replaced with periods, and the key is case-insensitive.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3isluamodactive).
--- @param key string The key to check.
--- @return boolean isActive True if the mod is active, otherwise false.
function tes3.isLuaModActive(key) end

--- Determines if the player has a given ESP or ESM file active.
--- @param filename string The filename of the mod to find, including the extension.
--- @return boolean result No description yet available.
function tes3.isModActive(filename) end

--- This function returns a function that iterates over a tes3iterator object. This is useful for for loops.
--- 		
--- Note that tes3iterator objects support iteration with `pairs()` function.
--- @param iterator tes3iterator No description yet available.
--- @return function function No description yet available.
function tes3.iterate(iterator) end

--- Iteration function used for looping over game options.
--- @param filter number|number[]|nil Maps to [`tes3.objectType`](https://mwse.github.io/MWSE/references/object-types/) constants.
--- @return tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon object No description yet available.
function tes3.iterateObjects(filter) end

--- Loads an animation and uses it to override existing animations on an actor. Animation groups present in the file will replace the actor's animation groups. The actor's model must be already loaded into memory to have its animations modified. The overridden animations only persist until the actor is unloaded.
--- 
--- Calling this more than once will remove the previous animation override before loading the new animation. Therefore, if applying animations to the player, you should call this before every playAnimation so that different animation mods can co-exist. For NPCs under your mod's control, you only need to do it when the player enters the cell containing the NPC.
--- 
--- Calling this without a file argument will reset the reference's animations to default.
--- @param params tes3.loadAnimation.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference to the actor that is having its animations modified.
--- 
--- `file`: string? — *Optional*. The specified animation base file that will be loaded. e.g. For an animation composed of files anim.nif, xanim.nif and xanim.kf, you should pass file="anim.nif". The animation target skeleton _must_ match the skeleton of the actor to work. i.e. 3rd person anims for NPCs and tes3.player, 1st person anims for firstPersonReference.
function tes3.loadAnimation(params) end

---Table parameter definitions for `tes3.loadAnimation`.
--- @class tes3.loadAnimation.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference to the actor that is having its animations modified.
--- @field file string? *Optional*. The specified animation base file that will be loaded. e.g. For an animation composed of files anim.nif, xanim.nif and xanim.kf, you should pass file="anim.nif". The animation target skeleton _must_ match the skeleton of the actor to work. i.e. 3rd person anims for NPCs and tes3.player, 1st person anims for firstPersonReference.

--- Loads a game.
--- @param filename string The full filename of the save that we want to load, including extension.
function tes3.loadGame(filename) end

--- Loads a mesh file and provides a scene graph object.
--- @param path string Path, relative to Data Files/Meshes.
--- @param useCache boolean? *Default*: `true`. If false, a new object will be created even if it had been previously loaded.
--- @return niBillboardNode|niCollisionSwitch|niNode|niSwitchNode model No description yet available.
function tes3.loadMesh(path, useCache) end

--- Loads a source texture file and provides the niSourceTexture object.
--- @param path string Path, relative to Data Files/Textures.
--- @param useCache boolean? *Default*: `true`. If false, a new object will be created even if it had been previously loaded.
--- @return niSourceTexture texture No description yet available.
function tes3.loadSourceTexture(path, useCache) end

--- Locks an object, and optionally sets a locked reference's lock level. Returns true if the object can be and wasn't already locked.
--- @param params tes3.lock.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- 
--- `level`: number? — *Optional*. No description yet available.
--- @return boolean locked No description yet available.
function tes3.lock(params) end

---Table parameter definitions for `tes3.lock`.
--- @class tes3.lock.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.
--- @field level number? *Optional*. No description yet available.

--- This function returns a function that iterates over a tes3tarray object. This is useful for for loops.
--- @param tarray tes3tarray No description yet available.
--- @return function iterationFunction No description yet available.
function tes3.loopTArray(tarray) end

--- Returns a safe handle for the object. To get the object use `:getObject()`. To check if it still exists use `:valid()`.
--- @param object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3bodyPart|tes3book|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3door|tes3enchantment|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3reference|tes3repairTool|tes3spell|tes3static|tes3weapon An object to make a safe handle for.
--- @return mwseSafeObjectHandle safeObjectHandle No description yet available.
function tes3.makeSafeObjectHandle(object) end

--- Returns true if the player is currently in menu mode.
--- @return boolean inMenuMode No description yet available.
function tes3.menuMode() end

--- Displays a message box. This may be a simple toast-style message, or a box with choice buttons.
--- @param messageOrParams string|tes3.messageBox.messageOrParams This table accepts the following values:
--- 
--- `message`: string — No description yet available.
--- 
--- `buttons`: string[]? — *Optional*. An array of strings to use for buttons.
--- 
--- `callback`: function — No description yet available.
--- 
--- `showInDialog`: boolean? — *Default*: `true`. Specifying showInDialog = false forces the toast-style message, which is not shown in the dialog menu.
--- 
--- `duration`: number? — *Optional*. Overrides how long the toast-style message remains visible.
--- @param ... any? *Optional*. Only used if messageOrParams is a string.
--- @return tes3uiElement|nil element The UI menu created for the notification, if any.
function tes3.messageBox(messageOrParams, ...) end

---Table parameter definitions for `tes3.messageBox`.
--- @class tes3.messageBox.messageOrParams
--- @field message string No description yet available.
--- @field buttons string[]? *Optional*. An array of strings to use for buttons.
--- @field callback function No description yet available.
--- @field showInDialog boolean? *Default*: `true`. Specifying showInDialog = false forces the toast-style message, which is not shown in the dialog menu.
--- @field duration number? *Optional*. Overrides how long the toast-style message remains visible.

--- Modifies a statistic on a given actor. This should be used instead of manually setting values on the game structures, to ensure that events and GUI elements are properly handled. Either skill, attribute, or name must be provided.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3modstatistic).
--- @param params tes3.modStatistic.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — No description yet available.
--- 
--- `name`: string? — *Optional*. A generic name of an attribute to set.
--- 
--- `attribute`: number? — *Optional*. The attribute to set.
--- 
--- `skill`: number? — *Optional*. The skill to set.
--- 
--- `base`: number? — *Optional*. If set, the base value will be modified.
--- 
--- `current`: number? — *Optional*. If set, the current value will be modified.
--- 
--- `value`: number? — *Optional*. If set, both the base and current value will be modified.
--- 
--- `limit`: boolean? — *Default*: `false`. If set, the attribute won't rise above 100 or fall below 0.
--- 
--- `limitToBase`: boolean? — *Default*: `false`. If set, the attribute's current value won't rise above its base value. Useful for health, magicka, and fatigue.
function tes3.modStatistic(params) end

---Table parameter definitions for `tes3.modStatistic`.
--- @class tes3.modStatistic.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string No description yet available.
--- @field name string? *Optional*. A generic name of an attribute to set.
--- @field attribute number? *Optional*. The attribute to set.
--- @field skill number? *Optional*. The skill to set.
--- @field base number? *Optional*. If set, the base value will be modified.
--- @field current number? *Optional*. If set, the current value will be modified.
--- @field value number? *Optional*. If set, both the base and current value will be modified.
--- @field limit boolean? *Default*: `false`. If set, the attribute won't rise above 100 or fall below 0.
--- @field limitToBase boolean? *Default*: `false`. If set, the attribute's current value won't rise above its base value. Useful for health, magicka, and fatigue.

--- Starts a new game.
function tes3.newGame() end

--- Returns true if the player is on the main menu, and hasn't loaded a game yet.
--- @return boolean onMainMenu No description yet available.
function tes3.onMainMenu() end

--- Attempts a persuasion attempt on an actor, potentially adjusting their disposition. Returns true if the attempt was a success.
--- @param params tes3.persuade.params This table accepts the following values:
--- 
--- `actor`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The actor to try to persuade.
--- 
--- `index`: number? — *Optional*. If an index is provided, 0-indexed with the following results: admire, intimidate, taunt, bribe (10), bribe (100), bribe (1000).
--- 
--- `modifier`: number? — *Optional*. If no index is provided, this is the direct modifier to try. The higher the modifer the higher the chance of a successful persuation, and higher disposition change.
--- @return boolean success No description yet available.
function tes3.persuade(params) end

---Table parameter definitions for `tes3.persuade`.
--- @class tes3.persuade.params
--- @field actor tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The actor to try to persuade.
--- @field index number? *Optional*. If an index is provided, 0-indexed with the following results: admire, intimidate, taunt, bribe (10), bribe (100), bribe (1000).
--- @field modifier number? *Optional*. If no index is provided, this is the direct modifier to try. The higher the modifer the higher the chance of a successful persuation, and higher disposition change.

--- Plays a given animation group. Optional flags can be used to define how the group starts.
--- 
--- When 'group' is specified, the actor AI is paused while playing the animation, as if in an idle state. When one or more of 'lower', 'upper', or 'shield' are specified without 'group', the actor AI retains control, and the animations are layered. e.g. `tes3.playAnimation{reference = ..., upper = tes3.animationGroup.idle3, loopCount = 0}` will play the idle3 animation once (without looping) on the upper body, while the player or NPC is still able to walk around. Using 'upper' defers combat actions until the animation is done. Using 'shield' still allows combat actions.
--- 
--- As a special case, `tes3.playAnimation{reference = ..., group = 0}` returns control to the AI, as the AI knows that is the actor's neutral idle state.
--- @param params tes3.playAnimation.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference that will play the animation.
--- 
--- `group`: number? — *Optional*. The animation group id to start playing -- a value from 0 to 149. Applies the animation to the whole body. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- 
--- `lower`: number? — *Optional*. Sets the animation group id for the lower body. This is used to combine different animations for each body section. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- 
--- `upper`: number? — *Optional*. Sets the animation group id for the upper body. This is used to combine different animations for each body section. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- 
--- `shield`: number? — *Optional*. Sets the animation group id for the shield arm. This is used to combine different animations for each body section. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- 
--- `startFlag`: number? — *Default*: `tes3.animationStartFlag.immediate`. A flag for starting the group with, using [`tes3.animationStartFlag`](https://mwse.github.io/MWSE/references/animation-start-flags/) constants.
--- 
--- `loopCount`: number? — *Default*: `-1`. If provided, the animation will repeat its loop section a given number of times. To make an animation play through once, set loopCount = 0. Defaults to infinite looping.
--- 
--- `mesh`: string? — *Optional*. Deprecated. Please use [`tes3.loadAnimation`](https://mwse.github.io/MWSE/apis/tes3/#tes3loadanimation) (check its documentation) before calling `playAnimation`. You can also use `loadAnimation` to reset loaded animations to default.
function tes3.playAnimation(params) end

---Table parameter definitions for `tes3.playAnimation`.
--- @class tes3.playAnimation.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference that will play the animation.
--- @field group number? *Optional*. The animation group id to start playing -- a value from 0 to 149. Applies the animation to the whole body. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- @field lower number? *Optional*. Sets the animation group id for the lower body. This is used to combine different animations for each body section. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- @field upper number? *Optional*. Sets the animation group id for the upper body. This is used to combine different animations for each body section. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- @field shield number? *Optional*. Sets the animation group id for the shield arm. This is used to combine different animations for each body section. Maps to [`tes3.animationGroup`](https://mwse.github.io/MWSE/references/animation-groups/) constants.
--- @field startFlag number? *Default*: `tes3.animationStartFlag.immediate`. A flag for starting the group with, using [`tes3.animationStartFlag`](https://mwse.github.io/MWSE/references/animation-start-flags/) constants.
--- @field loopCount number? *Default*: `-1`. If provided, the animation will repeat its loop section a given number of times. To make an animation play through once, set loopCount = 0. Defaults to infinite looping.
--- @field mesh string? *Optional*. Deprecated. Please use [`tes3.loadAnimation`](https://mwse.github.io/MWSE/apis/tes3/#tes3loadanimation) (check its documentation) before calling `playAnimation`. You can also use `loadAnimation` to reset loaded animations to default.

--- Plays the sound responsible for picking up or putting down an item.
--- @param params tes3.playItemPickupSound.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Optional*. The reference to attach the sound to.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon — No description yet available.
--- 
--- `pickup`: boolean? — *Default*: `true`. If false, the place down item will be used.
--- @return boolean executed No description yet available.
function tes3.playItemPickupSound(params) end

---Table parameter definitions for `tes3.playItemPickupSound`.
--- @class tes3.playItemPickupSound.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Optional*. The reference to attach the sound to.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon No description yet available.
--- @field pickup boolean? *Default*: `true`. If false, the place down item will be used.

--- Plays a sound on a given reference. Provides control over volume (including volume channel), pitch, and loop control.
--- 
--- **Note**: MP3 sound files can only be played if they are inside \\Vo\\ folder. The files must conform to the MPEG Layer-3, 64 Kbps 44100 kHz, 16-bit mono specification.
--- @param params tes3.playSound.params This table accepts the following values:
--- 
--- `sound`: tes3sound|string — The sound object, or id of the sound to look for.
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Optional*. The reference to attach the sound to.
--- 
--- `loop`: boolean? — *Default*: `false`. If true, the sound will loop.
--- 
--- `mixChannel`: number? — *Default*: `tes3.soundMix.effects`. The channel to base volume off of. Maps to [`tes3.soundMix`](https://mwse.github.io/MWSE/references/sound-mix-types/) constants.
--- 
--- `volume`: number? — *Default*: `1.0`. A value between 0.0 and 1.0 to scale the volume off of.
--- 
--- `pitch`: number? — *Default*: `1.0`. The pitch-shift multiplier. For 22kHz audio (most typical) it can have the range [0.005, 4.5]; for 44kHz audio it can have the range [0.0025, 2.25].
--- 
--- `soundPath`: string? — *Optional*. The path to a custom soundfile (useful for playing sounds that are not registered in the Construction Set). Starts in Data Files\Sound.
--- @return boolean executed No description yet available.
function tes3.playSound(params) end

---Table parameter definitions for `tes3.playSound`.
--- @class tes3.playSound.params
--- @field sound tes3sound|string The sound object, or id of the sound to look for.
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Optional*. The reference to attach the sound to.
--- @field loop boolean? *Default*: `false`. If true, the sound will loop.
--- @field mixChannel number? *Default*: `tes3.soundMix.effects`. The channel to base volume off of. Maps to [`tes3.soundMix`](https://mwse.github.io/MWSE/references/sound-mix-types/) constants.
--- @field volume number? *Default*: `1.0`. A value between 0.0 and 1.0 to scale the volume off of.
--- @field pitch number? *Default*: `1.0`. The pitch-shift multiplier. For 22kHz audio (most typical) it can have the range [0.005, 4.5]; for 44kHz audio it can have the range [0.0025, 2.25].
--- @field soundPath string? *Optional*. The path to a custom soundfile (useful for playing sounds that are not registered in the Construction Set). Starts in Data Files\Sound.

--- Causes a target actor to play a voiceover.
--- @param params tes3.playVoiceover.params This table accepts the following values:
--- 
--- `actor`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The actor to play a voiceover.
--- 
--- `voiceover`: number — Maps to [`tes3.voiceover`](https://mwse.github.io/MWSE/references/voiceovers/) constants.
--- @return boolean played No description yet available.
function tes3.playVoiceover(params) end

---Table parameter definitions for `tes3.playVoiceover`.
--- @class tes3.playVoiceover.params
--- @field actor tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The actor to play a voiceover.
--- @field voiceover number Maps to [`tes3.voiceover`](https://mwse.github.io/MWSE/references/voiceovers/) constants.

--- Positions a reference to another place.
--- @param params tes3.positionCell.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Default*: `tes3.mobilePlayer`. The reference to reposition.
--- 
--- `cell`: tes3cell? — *Optional*. The cell to move the reference to. If not provided, the reference will be moved to a cell in the exterior worldspace at the position provided.
--- 
--- `position`: tes3vector3|table — The position to move the reference to.
--- 
--- `orientation`: tes3vector3|table|nil — *Optional*. The new orientation of the reference.
--- 
--- `forceCellChange`: boolean? — *Default*: `false`. When true, forces the game to update a reference that has moved within a single cell, as if it was moved into a new cell.
--- 
--- `suppressFader`: boolean? — *Default*: `false`. When moving the player, can be used to prevent the fade in and out visual effect.
--- 
--- `teleportCompanions`: boolean? — *Default*: `true`. If used on the player, determines if companions should also be teleported.
--- @return boolean executed No description yet available.
function tes3.positionCell(params) end

---Table parameter definitions for `tes3.positionCell`.
--- @class tes3.positionCell.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Default*: `tes3.mobilePlayer`. The reference to reposition.
--- @field cell tes3cell? *Optional*. The cell to move the reference to. If not provided, the reference will be moved to a cell in the exterior worldspace at the position provided.
--- @field position tes3vector3|table The position to move the reference to.
--- @field orientation tes3vector3|table|nil *Optional*. The new orientation of the reference.
--- @field forceCellChange boolean? *Default*: `false`. When true, forces the game to update a reference that has moved within a single cell, as if it was moved into a new cell.
--- @field suppressFader boolean? *Default*: `false`. When moving the player, can be used to prevent the fade in and out visual effect.
--- @field teleportCompanions boolean? *Default*: `true`. If used on the player, determines if companions should also be teleported.

--- Simulates pushing a keyboard key.
--- @param keyCode number Maps to values in [`tes3.scanCode`](https://mwse.github.io/MWSE/references/scan-codes/) namespace.
function tes3.pushKey(keyCode) end

--- Returns a value from Morrowind's random number generator. This is not preferrable to lua's math.random function, but may be necessary for reproducing Morrowind's generation.
--- @param seed number? *Optional*. If provided, it the number generator is seeded with this value. Pointers to objects may be used, such as a reference's sceneNode, to create a consistent if less than random seed.
function tes3.random(seed) end

--- Performs a ray test and returns various information related to the result(s). If `findAll` is set, the result will be a table of results, otherwise only the first result is returned.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3raytest).
--- @param params tes3.rayTest.params This table accepts the following values:
--- 
--- `position`: tes3vector3|table — Position of the ray origin.
--- 
--- `direction`: tes3vector3|table — Direction of the ray. Does not have to be unit length.
--- 
--- `findAll`: boolean? — *Default*: `false`. If true, the ray test won't stop after the first result.
--- 
--- `maxDistance`: number? — *Default*: `0`. The maximum distance that the test will run.
--- 
--- `sort`: boolean? — *Default*: `true`. If true, the results will be sorted by distance from the origin position.
--- 
--- `useModelBounds`: boolean? — *Default*: `false`. If true, model bounds will be tested for intersection. Otherwise triangles will be used.
--- 
--- `useModelCoordinates`: boolean? — *Default*: `false`. If true, model coordinates will be used instead of world coordinates.
--- 
--- `useBackTriangles`: boolean? — *Default*: `false`. Include intersections with back-facing triangles.
--- 
--- `observeAppCullFlag`: boolean? — *Default*: `true`. Ignore intersections with culled (hidden) models.
--- 
--- `root`: niBillboardNode|niCollisionSwitch|niNode|niSwitchNode|nil — *Default*: `tes3.game.worldRoot`. Node pointer to node scene. To reduce the computational work, consider passing only a smaller subset of the `worldRoot` to improve performance. The typical nodes you can pass here are: [`tes3.game.worldLandscapeRoot`](https://mwse.github.io/MWSE/types/tes3game/#worldLandscapeRoot), [`worldObjectRoot`](https://mwse.github.io/MWSE/types/tes3game/#worldObjectRoot), and [`worldPickRoot`](https://mwse.github.io/MWSE/types/tes3game/#worldPickRoot).
--- 
--- `returnColor`: boolean? — *Default*: `false`. Calculate and return the vertex color at intersections.
--- 
--- `returnNormal`: boolean? — *Default*: `false`. Calculate and return the vertex normal at intersections.
--- 
--- `returnSmoothNormal`: boolean? — *Default*: `false`. Use normal interpolation for calculating vertex normals.
--- 
--- `returnTexture`: boolean? — *Default*: `false`. Calculate and return the texture coordinate at intersections.
--- 
--- `ignore`: table<integer?, niBillboardNode|niCollisionSwitch|niNode|niSwitchNode|tes3reference|nil> — *Optional*. An array of references and/or scene graph nodes to cull from the result(s).
--- @return niPickRecord|niPickRecord[]|nil result No description yet available.
function tes3.rayTest(params) end

---Table parameter definitions for `tes3.rayTest`.
--- @class tes3.rayTest.params
--- @field position tes3vector3|table Position of the ray origin.
--- @field direction tes3vector3|table Direction of the ray. Does not have to be unit length.
--- @field findAll boolean? *Default*: `false`. If true, the ray test won't stop after the first result.
--- @field maxDistance number? *Default*: `0`. The maximum distance that the test will run.
--- @field sort boolean? *Default*: `true`. If true, the results will be sorted by distance from the origin position.
--- @field useModelBounds boolean? *Default*: `false`. If true, model bounds will be tested for intersection. Otherwise triangles will be used.
--- @field useModelCoordinates boolean? *Default*: `false`. If true, model coordinates will be used instead of world coordinates.
--- @field useBackTriangles boolean? *Default*: `false`. Include intersections with back-facing triangles.
--- @field observeAppCullFlag boolean? *Default*: `true`. Ignore intersections with culled (hidden) models.
--- @field root niBillboardNode|niCollisionSwitch|niNode|niSwitchNode|nil *Default*: `tes3.game.worldRoot`. Node pointer to node scene. To reduce the computational work, consider passing only a smaller subset of the `worldRoot` to improve performance. The typical nodes you can pass here are: [`tes3.game.worldLandscapeRoot`](https://mwse.github.io/MWSE/types/tes3game/#worldLandscapeRoot), [`worldObjectRoot`](https://mwse.github.io/MWSE/types/tes3game/#worldObjectRoot), and [`worldPickRoot`](https://mwse.github.io/MWSE/types/tes3game/#worldPickRoot).
--- @field returnColor boolean? *Default*: `false`. Calculate and return the vertex color at intersections.
--- @field returnNormal boolean? *Default*: `false`. Calculate and return the vertex normal at intersections.
--- @field returnSmoothNormal boolean? *Default*: `false`. Use normal interpolation for calculating vertex normals.
--- @field returnTexture boolean? *Default*: `false`. Calculate and return the texture coordinate at intersections.
--- @field ignore table<integer?, niBillboardNode|niCollisionSwitch|niNode|niSwitchNode|tes3reference|nil> *Optional*. An array of references and/or scene graph nodes to cull from the result(s).

--- Simulates releasing a keyboard key.
--- @param keyCode number Maps to values in [`tes3.scanCode`](https://mwse.github.io/MWSE/references/scan-codes/) namespace.
function tes3.releaseKey(keyCode) end

--- Removes magic effects from a given reference. Requires that either the `effect` or `castType` parameter be provided.
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/apis/tes3/#tes3removeeffects).
--- @param params tes3.removeEffects.params This table accepts the following values:
--- 
--- `reference`: tes3reference — Target reference to remove effects from.
--- 
--- `effect`: integer? — *Optional*. Maps to [`tes3.effect`](https://mwse.github.io/MWSE/references/magic-effects/) constants.
--- 
--- `castType`: integer? — *Optional*. Maps to [`tes3.spellType`](https://mwse.github.io/MWSE/references/spell-types/) constants.
--- 
--- `chance`: number? — *Default*: `100`. The chance for the effect to be removed.
--- 
--- `removeSpell`: boolean? — *Optional*. If removing by cast type, determines if the spell should be removed from the target's spell list. Defaults to true if `castType` is not `tes3.spellType.spell.` This causes diseases and curses to be removed when dispelled.
function tes3.removeEffects(params) end

---Table parameter definitions for `tes3.removeEffects`.
--- @class tes3.removeEffects.params
--- @field reference tes3reference Target reference to remove effects from.
--- @field effect integer? *Optional*. Maps to [`tes3.effect`](https://mwse.github.io/MWSE/references/magic-effects/) constants.
--- @field castType integer? *Optional*. Maps to [`tes3.spellType`](https://mwse.github.io/MWSE/references/spell-types/) constants.
--- @field chance number? *Default*: `100`. The chance for the effect to be removed.
--- @field removeSpell boolean? *Optional*. If removing by cast type, determines if the spell should be removed from the target's spell list. Defaults to true if `castType` is not `tes3.spellType.spell.` This causes diseases and curses to be removed when dispelled.

--- Removes an item from a given reference's inventory.
--- @param params tes3.removeItem.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to remove items from.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — The item to remove.
--- 
--- `itemData`: tes3itemData? — *Optional*. The item data for the exact item to remove.
--- 
--- `deleteItemData`: tes3itemData? — *Optional*. Whether to delete the item data after remove succeeds. Automatically set if itemData is used. Does not need to be specified for normal usage.
--- 
--- `count`: number? — *Default*: `1`. The maximum number of items to remove.
--- 
--- `playSound`: boolean? — *Default*: `true`. If false, the up/down sound for the item won't be played.
--- 
--- `reevaluateEquipment`: boolean? — *Default*: `true`. If true, and the item removed is armor, clothing, or a weapon, the actor will reevaluate its equipment choices to see if it needs to equip a new item. This does not affect the player.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If false, the function won't manually resync the player's GUI state. This can result in some optimizations, though [`tes3ui.forcePlayerInventoryUpdate()`](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uiforceplayerinventoryupdate) must manually be called after all inventory updates are finished.
--- @return number removedCount No description yet available.
function tes3.removeItem(params) end

---Table parameter definitions for `tes3.removeItem`.
--- @class tes3.removeItem.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to remove items from.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string The item to remove.
--- @field itemData tes3itemData? *Optional*. The item data for the exact item to remove.
--- @field deleteItemData tes3itemData? *Optional*. Whether to delete the item data after remove succeeds. Automatically set if itemData is used. Does not need to be specified for normal usage.
--- @field count number? *Default*: `1`. The maximum number of items to remove.
--- @field playSound boolean? *Default*: `true`. If false, the up/down sound for the item won't be played.
--- @field reevaluateEquipment boolean? *Default*: `true`. If true, and the item removed is armor, clothing, or a weapon, the actor will reevaluate its equipment choices to see if it needs to equip a new item. This does not affect the player.
--- @field updateGUI boolean? *Default*: `true`. If false, the function won't manually resync the player's GUI state. This can result in some optimizations, though [`tes3ui.forcePlayerInventoryUpdate()`](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uiforceplayerinventoryupdate) must manually be called after all inventory updates are finished.

--- Removes and deletes item data from a given reference, or from their inventory. If no `itemData` is provided, it will be removed from the reference itself.
--- @param params tes3.removeItemData.params This table accepts the following values:
--- 
--- `from`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference or mobile whose inventory will be modified.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — The item to remove item data for.
--- 
--- `itemData`: tes3itemData? — *Optional*. The exact item data to remove. If no itemData is provided, the itemData from the reference itself will be removed.
--- 
--- `force`: boolean? — *Default*: `false`. If true, no checks are made to see if the item data should be deleted. It will always be purged.
--- 
--- `ignoreOwnership`: boolean? — *Default*: `true`. If `force` is false, a check will be made to see if the item data is empty and can be deleted. By default this ignores any ownership data. Setting this to false will override that behavior.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If false, the player or contents menu won't be updated.
--- @return boolean wasRemoved No description yet available.
function tes3.removeItemData(params) end

---Table parameter definitions for `tes3.removeItemData`.
--- @class tes3.removeItemData.params
--- @field from tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference or mobile whose inventory will be modified.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string The item to remove item data for.
--- @field itemData tes3itemData? *Optional*. The exact item data to remove. If no itemData is provided, the itemData from the reference itself will be removed.
--- @field force boolean? *Default*: `false`. If true, no checks are made to see if the item data should be deleted. It will always be purged.
--- @field ignoreOwnership boolean? *Default*: `true`. If `force` is false, a check will be made to see if the item data is empty and can be deleted. By default this ignores any ownership data. Setting this to false will override that behavior.
--- @field updateGUI boolean? *Default*: `true`. If false, the player or contents menu won't be updated.

--- Stops a sound playing. Without a reference, it will match unattached sounds. With a reference, it will only match a sound playing on that specific reference.
--- @param params tes3.removeSound.params This table accepts the following values:
--- 
--- `sound`: tes3sound|string — The sound object, or id of the sound to look for.
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil — *Optional*. The reference the sound is attached to.
function tes3.removeSound(params) end

---Table parameter definitions for `tes3.removeSound`.
--- @class tes3.removeSound.params
--- @field sound tes3sound|string The sound object, or id of the sound to look for.
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string|nil *Optional*. The reference the sound is attached to.

--- Removes a spell from an actor's spell list. If the spell is passive, any active effects from that spell are retired.
--- @param params tes3.removeSpell.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to remove the spell from. To manipulate an actor without specifying any particular reference, use `actor` instead.
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string — Who to remove the spell from. Providing a base actor can be done before a save has been loaded, but may not correctly update effects for instanced versions of that actor in an active save.
--- 
--- `spell`: tes3spell|string — The spell to remove.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If true, the GUI will be updated respecting the removal of the spell. This can be useful to disable when batch-removing many spells. The batch should be ended with [`tes3.updateMagicGUI`](https://mwse.github.io/MWSE/apis/tes3/#tes3updatemagicgui) to reflect the changes.
--- @return boolean wasRemoved True if the spell was successfully removed. This can be false if the spell comes from a race or birthsign.
function tes3.removeSpell(params) end

---Table parameter definitions for `tes3.removeSpell`.
--- @class tes3.removeSpell.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to remove the spell from. To manipulate an actor without specifying any particular reference, use `actor` instead.
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string Who to remove the spell from. Providing a base actor can be done before a save has been loaded, but may not correctly update effects for instanced versions of that actor in an active save.
--- @field spell tes3spell|string The spell to remove.
--- @field updateGUI boolean? *Default*: `true`. If true, the GUI will be updated respecting the removal of the spell. This can be useful to disable when batch-removing many spells. The batch should be ended with [`tes3.updateMagicGUI`](https://mwse.github.io/MWSE/apis/tes3/#tes3updatemagicgui) to reflect the changes.

--- Removes one or more visual effects created either through magical effects or `tes3.createVisualEffect()`.
--- @param params tes3.removeVisualEffect.params This table accepts the following values:
--- 
--- `vfx`: tes3vfx? — *Optional*. If provided, the specific VFX handle will be deleted.
--- 
--- `avObject`: niAmbientLight|niBillboardNode|niCamera|niCollisionSwitch|niDirectionalLight|niNode|niParticles|niPointLight|niRotatingParticles|niSpotLight|niSwitchNode|niTextureEffect|niTriShape|nil — *Optional*. If provided, any VFXs associated with the given niAVObject will be deleted.
--- 
--- `serial`: number? — *Optional*. The magic source instance serial number to remove effects for. This must be paired with a reference as well.
--- 
--- `reference`: tes3reference|string|nil — *Optional*. The reference to remove all visual effects from. A serial may also be provided.
--- @return number removedCount The amount of VFX removed by this function call.
function tes3.removeVisualEffect(params) end

---Table parameter definitions for `tes3.removeVisualEffect`.
--- @class tes3.removeVisualEffect.params
--- @field vfx tes3vfx? *Optional*. If provided, the specific VFX handle will be deleted.
--- @field avObject niAmbientLight|niBillboardNode|niCamera|niCollisionSwitch|niDirectionalLight|niNode|niParticles|niPointLight|niRotatingParticles|niSpotLight|niSwitchNode|niTextureEffect|niTriShape|nil *Optional*. If provided, any VFXs associated with the given niAVObject will be deleted.
--- @field serial number? *Optional*. The magic source instance serial number to remove effects for. This must be paired with a reference as well.
--- @field reference tes3reference|string|nil *Optional*. The reference to remove all visual effects from. A serial may also be provided.

--- This function will compile and run a mwscript chunk of code. This is not ideal to use, but can be used for features not yet exposed to lua.
--- @param params tes3.runLegacyScript.params This table accepts the following values:
--- 
--- `script`: tes3script? — *Default*: `tes3.worldController.scriptGlobals`. The base script to base the execution from.
--- 
--- `source`: number — The compilation source to use. Defaults to tes3.scriptSource.default
--- 
--- `command`: string — The script text to compile and run.
--- 
--- `variables`: tes3scriptVariables? — *Optional*. If a reference is provided, the reference's variables will be used.
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to target for execution.
--- 
--- `dialogue`: tes3dialogue|string|nil — *Optional*. If compiling for dialogue context, the dialogue associated with the script.
--- 
--- `info`: tes3dialogueInfo? — *Optional*. The info associated with the dialogue.
--- @return boolean executed No description yet available.
function tes3.runLegacyScript(params) end

---Table parameter definitions for `tes3.runLegacyScript`.
--- @class tes3.runLegacyScript.params
--- @field script tes3script? *Default*: `tes3.worldController.scriptGlobals`. The base script to base the execution from.
--- @field source number The compilation source to use. Defaults to tes3.scriptSource.default
--- @field command string The script text to compile and run.
--- @field variables tes3scriptVariables? *Optional*. If a reference is provided, the reference's variables will be used.
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to target for execution.
--- @field dialogue tes3dialogue|string|nil *Optional*. If compiling for dialogue context, the dialogue associated with the script.
--- @field info tes3dialogueInfo? *Optional*. The info associated with the dialogue.

--- Saves the game.
--- @param params tes3.saveGame.params This table accepts the following values:
--- 
--- `file`: string? — *Default*: `"quiksave"`. The filename of the save that will be created, without extension.
--- 
--- `name`: string? — *Default*: `"Quicksave"`. The display name of the save.
--- @return boolean saved No description yet available.
function tes3.saveGame(params) end

---Table parameter definitions for `tes3.saveGame`.
--- @class tes3.saveGame.params
--- @field file string? *Default*: `"quiksave"`. The filename of the save that will be created, without extension.
--- @field name string? *Default*: `"Quicksave"`. The display name of the save.

--- Plays a sound file, with an optional alteration and subtitle.
--- 
--- **Note**: MP3 voice files must conform to the MPEG Layer-3, 64 Kbps 44100 kHz, 16-bit mono specification.
--- @param params tes3.say.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to make say something.
--- 
--- `soundPath`: string — A path to a valid sound file.
--- 
--- `pitch`: number? — *Default*: `1`. A pitch shift to adjust the sound with.
--- 
--- `volume`: number? — *Default*: `1`. The volume to play the sound at, relative to the voice mix channel.
--- 
--- `forceSubtitle`: boolean? — *Default*: `false`. If true a subtitle will be shown, even if subtitles are disabled.
--- 
--- `subtitle`: string? — *Optional*. The subtitle to show if subtitles are enabled, or if forceSubtitle is set.
function tes3.say(params) end

---Table parameter definitions for `tes3.say`.
--- @class tes3.say.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to make say something.
--- @field soundPath string A path to a valid sound file.
--- @field pitch number? *Default*: `1`. A pitch shift to adjust the sound with.
--- @field volume number? *Default*: `1`. The volume to play the sound at, relative to the voice mix channel.
--- @field forceSubtitle boolean? *Default*: `false`. If true a subtitle will be shown, even if subtitles are disabled.
--- @field subtitle string? *Optional*. The subtitle to show if subtitles are enabled, or if forceSubtitle is set.

--- Changes the 3rd person camera offset from the player's head.
--- 
--- !!! important
--- 	This function can be used once tes3worldController and tes3mobilePlayer have finished initializing.
--- @param params tes3.set3rdPersonCameraOffset.params This table accepts the following values:
--- 
--- `offset`: tes3vector3 — The offset vector.
function tes3.set3rdPersonCameraOffset(params) end

---Table parameter definitions for `tes3.set3rdPersonCameraOffset`.
--- @class tes3.set3rdPersonCameraOffset.params
--- @field offset tes3vector3 The offset vector.

--- Configures a mobile actor to activate an object.
--- @param params tes3.setAIActivate.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference — This actor will activate the provided `target` reference.
--- 
--- `target`: tes3reference — The reference to activate.
--- 
--- `reset`: boolean? — *Default*: `true`. No description yet available.
function tes3.setAIActivate(params) end

---Table parameter definitions for `tes3.setAIActivate`.
--- @class tes3.setAIActivate.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference This actor will activate the provided `target` reference.
--- @field target tes3reference The reference to activate.
--- @field reset boolean? *Default*: `true`. No description yet available.

--- Configures a mobile actor to escort another actor to a destination. Escorting actor will protect and wait for the escortee to catch up. Its advisible to make the `target` actor follow the escorting actor with `tes3.setAIFollow()`, because the escorting actor will otherwise wait the escortee forever.
--- @param params tes3.setAIEscort.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference — The escorting actor.
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer — The actor being escorted.
--- 
--- `destination`: tes3vector3|table — No description yet available.
--- 
--- `duration`: number? — *Default*: `0`. How long the escorter will do the escorting, in hours.
--- 
--- `cell`: tes3cell|string|nil — *Optional*. No description yet available.
--- 
--- `reset`: boolean? — *Default*: `true`. No description yet available.
function tes3.setAIEscort(params) end

---Table parameter definitions for `tes3.setAIEscort`.
--- @class tes3.setAIEscort.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference The escorting actor.
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer The actor being escorted.
--- @field destination tes3vector3|table No description yet available.
--- @field duration number? *Default*: `0`. How long the escorter will do the escorting, in hours.
--- @field cell tes3cell|string|nil *Optional*. No description yet available.
--- @field reset boolean? *Default*: `true`. No description yet available.

--- Configures a mobile actor to follow another actor to a destination.
--- @param params tes3.setAIFollow.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference — This is the actor that will follow another one.
--- 
--- `target`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer — The actor to follow.
--- 
--- `destination`: tes3vector3|table|nil — *Optional*. No description yet available.
--- 
--- `duration`: number? — *Default*: `0`. How long the follower will follow, in hours.
--- 
--- `cell`: tes3cell|string|nil — *Optional*. No description yet available.
--- 
--- `reset`: boolean? — *Default*: `true`. No description yet available.
function tes3.setAIFollow(params) end

---Table parameter definitions for `tes3.setAIFollow`.
--- @class tes3.setAIFollow.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference This is the actor that will follow another one.
--- @field target tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer The actor to follow.
--- @field destination tes3vector3|table|nil *Optional*. No description yet available.
--- @field duration number? *Default*: `0`. How long the follower will follow, in hours.
--- @field cell tes3cell|string|nil *Optional*. No description yet available.
--- @field reset boolean? *Default*: `true`. No description yet available.

--- Configures a mobile actor to travel to a destination.
--- @param params tes3.setAITravel.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference — No description yet available.
--- 
--- `destination`: tes3vector3|table — No description yet available.
--- 
--- `reset`: boolean? — *Default*: `true`. No description yet available.
function tes3.setAITravel(params) end

---Table parameter definitions for `tes3.setAITravel`.
--- @class tes3.setAITravel.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference No description yet available.
--- @field destination tes3vector3|table No description yet available.
--- @field reset boolean? *Default*: `true`. No description yet available.

--- Configures a mobile actor to wander around a cell.
--- @param params tes3.setAIWander.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference — This actor will wander around.
--- 
--- `idles`: number[] — An array with 8 values that corresponds to the chance of playing each idle animation. For more info see [tes3aiPackageWander.idles](https://mwse.github.io/MWSE/types/tes3aiPackageWander/#idles).
--- 
--- `range`: number? — *Default*: `0`. No description yet available.
--- 
--- `duration`: number? — *Default*: `0`. How long the actor will be wandering around, in hours.
--- 
--- `time`: number? — *Default*: `0`. No description yet available.
--- 
--- `reset`: boolean? — *Default*: `true`. No description yet available.
function tes3.setAIWander(params) end

---Table parameter definitions for `tes3.setAIWander`.
--- @class tes3.setAIWander.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference This actor will wander around.
--- @field idles number[] An array with 8 values that corresponds to the chance of playing each idle animation. For more info see [tes3aiPackageWander.idles](https://mwse.github.io/MWSE/types/tes3aiPackageWander/#idles).
--- @field range number? *Default*: `0`. No description yet available.
--- @field duration number? *Default*: `0`. How long the actor will be wandering around, in hours.
--- @field time number? *Default*: `0`. No description yet available.
--- @field reset boolean? *Default*: `true`. No description yet available.

--- This function sets a reference's animation groups' timings to a specified value.
--- @param params tes3.setAnimationTiming.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — A reference whose animation groups' timings to set.
--- 
--- `timing`: number|table — If one parameter is provided, all animation data timings will be set to the timing provided. If a table with 3 timings is provided, animation data timings will be set accordingly.
function tes3.setAnimationTiming(params) end

---Table parameter definitions for `tes3.setAnimationTiming`.
--- @class tes3.setAnimationTiming.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string A reference whose animation groups' timings to set.
--- @field timing number|table If one parameter is provided, all animation data timings will be set to the timing provided. If a table with 3 timings is provided, animation data timings will be set accordingly.

--- Sets or changes the destination of a door to a new location.
--- @param params tes3.setDestination.params This table accepts the following values:
--- 
--- `reference`: tes3reference — The door reference that will be updated.
--- 
--- `position`: tes3vector3|table — The new coordinates of the transition.
--- 
--- `orientation`: tes3vector3|table — The new rotation to use after transition.
--- 
--- `cell`: tes3cell|string|nil — *Optional*. The cell to transition to, if transitioning to an interior.
function tes3.setDestination(params) end

---Table parameter definitions for `tes3.setDestination`.
--- @class tes3.setDestination.params
--- @field reference tes3reference The door reference that will be updated.
--- @field position tes3vector3|table The new coordinates of the transition.
--- @field orientation tes3vector3|table The new rotation to use after transition.
--- @field cell tes3cell|string|nil *Optional*. The cell to transition to, if transitioning to an interior.

--- Enables or disables a reference.
--- @param params tes3.setEnabled.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to enable/disable.
--- 
--- `toggle`: boolean? — *Default*: `false`. If true, the enabled state will be toggled.
--- 
--- `enabled`: boolean? — *Default*: `true`. If not toggling, setting `enabled` to true will enable the reference or to false will disable the reference.
--- @return boolean success No description yet available.
function tes3.setEnabled(params) end

---Table parameter definitions for `tes3.setEnabled`.
--- @class tes3.setEnabled.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to enable/disable.
--- @field toggle boolean? *Default*: `false`. If true, the enabled state will be toggled.
--- @field enabled boolean? *Default*: `true`. If not toggling, setting `enabled` to true will enable the reference or to false will disable the reference.

--- Sets the value of a global value. If the global could not be found, the function returns false.
--- @param id string No description yet available.
--- @param value number No description yet available.
--- @return boolean value No description yet available.
function tes3.setGlobal(id, value) end

--- This function changes an item's stolen flag. Morrowind handles stealing by marking the base item (not the inventory stack) with NPCs that you have stolen that item from. The NPC will recognize an item as stolen if they are marked as stolen on the base item.
--- @param params tes3.setItemIsStolen.params This table accepts the following values:
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon — The item whose stolen flag to modify.
--- 
--- `from`: tes3creature|tes3npc|tes3faction|nil — Who or what to set/clear the stolen state for. If not provided, the stolen state can be cleared (but not set) for all objects.
--- 
--- `stolen`: boolean? — *Default*: `true`. If this parameter is set to true, the item will be flagged as stolen. Otherwise, the item's stolen flag will be removed.
function tes3.setItemIsStolen(params) end

---Table parameter definitions for `tes3.setItemIsStolen`.
--- @class tes3.setItemIsStolen.params
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon The item whose stolen flag to modify.
--- @field from tes3creature|tes3npc|tes3faction|nil Who or what to set/clear the stolen state for. If not provided, the stolen state can be cleared (but not set) for all objects.
--- @field stolen boolean? *Default*: `true`. If this parameter is set to true, the item will be flagged as stolen. Otherwise, the item's stolen flag will be removed.

--- Sets the index of a given journal in a way similar to the mwscript function SetJournalIndex.
--- @param params tes3.setJournalIndex.params This table accepts the following values:
--- 
--- `id`: tes3dialogue|string — No description yet available.
--- 
--- `index`: number — No description yet available.
--- 
--- `speaker`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — No description yet available.
--- 
--- `showMessage`: boolean? — *Default*: `false`. If set, a message may be shown to the player.
--- @return boolean wasSet No description yet available.
function tes3.setJournalIndex(params) end

---Table parameter definitions for `tes3.setJournalIndex`.
--- @class tes3.setJournalIndex.params
--- @field id tes3dialogue|string No description yet available.
--- @field index number No description yet available.
--- @field speaker tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string No description yet available.
--- @field showMessage boolean? *Default*: `false`. If set, a message may be shown to the player.

--- Sets player's kill count of a certain type of actor.
--- @param params tes3.setKillCount.params This table accepts the following values:
--- 
--- `actor`: tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string — The actor (or their ID) for whom to set player's kill count.
--- 
--- `count`: number — Number of kills that will be set.
function tes3.setKillCount(params) end

---Table parameter definitions for `tes3.setKillCount`.
--- @class tes3.setKillCount.params
--- @field actor tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|string The actor (or their ID) for whom to set player's kill count.
--- @field count number Number of kills that will be set.

--- Sets a locked reference's lock level. This does not lock the object.
--- @param params tes3.setLockLevel.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- 
--- `level`: number — No description yet available.
--- @return boolean set No description yet available.
function tes3.setLockLevel(params) end

---Table parameter definitions for `tes3.setLockLevel`.
--- @class tes3.setLockLevel.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.
--- @field level number No description yet available.

--- This function sets the player's mark location to the one specified.
--- @param params tes3.setMarkLocation.params This table accepts the following values:
--- 
--- `position`: tes3vector3 — Coordinates of the mark's position.
--- 
--- `rotation`: number? — *Default*: `Player's current rotation.`. This argument controls which direction the player's mark location will be facing.
--- 
--- `cell`: tes3cell? — *Optional*. A cell in which the mark should be placed.
function tes3.setMarkLocation(params) end

---Table parameter definitions for `tes3.setMarkLocation`.
--- @class tes3.setMarkLocation.params
--- @field position tes3vector3 Coordinates of the mark's position.
--- @field rotation number? *Default*: `Player's current rotation.`. This argument controls which direction the player's mark location will be facing.
--- @field cell tes3cell? *Optional*. A cell in which the mark should be placed.

--- This function sets the owner of a reference.
--- @param params tes3.setOwner.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — A reference whose owner to set.
--- 
--- `remove`: boolean? — *Default*: `false`. If this parameter is set to true, reference's owner field will be removed.
--- 
--- `owner`: tes3npc|tes3faction|string — Assigns this NPC or a faction as the owner of the reference.
--- 
--- `requiredGlobal`: tes3globalVariable? — *Optional*. If `owner` is set to NPC, `requiredGlobal` variable can be set.
--- 
--- `requiredRank`: number? — *Default*: `0`. If `owner` is set to faction, `requitedRank` variable controls minimal rank in faction the player has to have to be able to freely take the reference.
function tes3.setOwner(params) end

---Table parameter definitions for `tes3.setOwner`.
--- @class tes3.setOwner.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string A reference whose owner to set.
--- @field remove boolean? *Default*: `false`. If this parameter is set to true, reference's owner field will be removed.
--- @field owner tes3npc|tes3faction|string Assigns this NPC or a faction as the owner of the reference.
--- @field requiredGlobal tes3globalVariable? *Optional*. If `owner` is set to NPC, `requiredGlobal` variable can be set.
--- @field requiredRank number? *Default*: `0`. If `owner` is set to faction, `requitedRank` variable controls minimal rank in faction the player has to have to be able to freely take the reference.

--- Enables or disables player's controls state.
--- @param params tes3.setPlayerControlState.params? This table accepts the following values:
--- 
--- `enabled`: boolean? — *Default*: `false`. Setting this to false will disable any kind of control.
--- 
--- `attack`: boolean? — *Default*: `false`. If this is false, it will block player from attacking.
--- 
--- `jumping`: boolean? — *Default*: `false`. If this is false, it will block player from jumping.
--- 
--- `magic`: boolean? — *Default*: `false`. If this is false, it will block player from using magic.
--- 
--- `vanity`: boolean? — *Default*: `false`. If this is false, it will block player from going to vanity mode.
--- 
--- `viewSwitch`: boolean? — *Default*: `false`. If this is false, it will block player changing view mod from 1st to 3rd person camera and vice versa.
--- @return boolean changedControlState No description yet available.
function tes3.setPlayerControlState(params) end

---Table parameter definitions for `tes3.setPlayerControlState`.
--- @class tes3.setPlayerControlState.params
--- @field enabled boolean? *Default*: `false`. Setting this to false will disable any kind of control.
--- @field attack boolean? *Default*: `false`. If this is false, it will block player from attacking.
--- @field jumping boolean? *Default*: `false`. If this is false, it will block player from jumping.
--- @field magic boolean? *Default*: `false`. If this is false, it will block player from using magic.
--- @field vanity boolean? *Default*: `false`. If this is false, it will block player from going to vanity mode.
--- @field viewSwitch boolean? *Default*: `false`. If this is false, it will block player changing view mod from 1st to 3rd person camera and vice versa.

--- Sets an object (of any kind) to be sourceless, which are objects the game does not store in savegames. This can be useful for mod-created temporary objects which are not necessary to save.
--- @param object tes3activator|tes3alchemy|tes3apparatus|tes3armor|tes3birthsign|tes3bodyPart|tes3book|tes3cell|tes3class|tes3clothing|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3dialogue|tes3dialogueInfo|tes3door|tes3enchantment|tes3faction|tes3gameSetting|tes3globalVariable|tes3ingredient|tes3leveledCreature|tes3leveledItem|tes3light|tes3lockpick|tes3magicSourceInstance|tes3misc|tes3npc|tes3npcInstance|tes3probe|tes3quest|tes3race|tes3reference|tes3region|tes3repairTool|tes3script|tes3skill|tes3sound|tes3soundGenerator|tes3spell|tes3startScript|tes3static|tes3weapon The object whose sourceless flag to modify.
--- @param sourceless boolean? *Default*: `true`. Allows flagging an object as sourceless or undoing that action.
function tes3.setSourceless(object, sourceless) end

--- Sets a statistic on a given actor. This should be used instead of manually setting values on the game structures, to ensure that events and GUI elements are properly handled. Either skill, attribute, or name must be provided.
--- @param params tes3.setStatistic.params This table accepts the following values:
--- 
--- `attribute`: number? — *Optional*. The attribute to set.
--- 
--- `base`: number? — *Optional*. If set, the base value will be set.
--- 
--- `current`: number? — *Optional*. If set, the current value will be set.
--- 
--- `limit`: boolean? — *Default*: `false`. If set, the attribute won't rise above 100 or fall below 0.
--- 
--- `name`: string? — *Optional*. A generic name of an attribute to set.
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — No description yet available.
--- 
--- `skill`: number? — *Optional*. The skill to set.
--- 
--- `value`: number? — *Optional*. If set, both the base and current value will be set.
function tes3.setStatistic(params) end

---Table parameter definitions for `tes3.setStatistic`.
--- @class tes3.setStatistic.params
--- @field attribute number? *Optional*. The attribute to set.
--- @field base number? *Optional*. If set, the base value will be set.
--- @field current number? *Optional*. If set, the current value will be set.
--- @field limit boolean? *Default*: `false`. If set, the attribute won't rise above 100 or fall below 0.
--- @field name string? *Optional*. A generic name of an attribute to set.
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string No description yet available.
--- @field skill number? *Optional*. The skill to set.
--- @field value number? *Optional*. If set, both the base and current value will be set.

--- Sets the trap on a given reference.
--- @param params tes3.setTrap.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- 
--- `spell`: tes3spell|string — No description yet available.
--- @return boolean trapped No description yet available.
function tes3.setTrap(params) end

---Table parameter definitions for `tes3.setTrap`.
--- @class tes3.setTrap.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.
--- @field spell tes3spell|string No description yet available.

--- Toggles the camera into vanity mode. In vanity mode the camera is in third person and it is orbiting slowly around the player character. Returns true if changed to vanity mode.
--- 
--- Note that unlike the vanity mode caused by not doing anything for a while, this vanity mode must be toggled to go off.
--- @param params tes3.setVanityMode.params? This table accepts the following values:
--- 
--- `enabled`: boolean? — *Default*: `true`. This flag sets the vanity mode as enabled or disabled.
--- 
--- `checkVanityDisabled`: boolean? — *Default*: `true`. This will prevent changing vanity mode according to vanityDisabled flag on tes3.mobilePlayer.
--- 
--- `toggle`: boolean? — *Default*: `false`. When this flag is set to true. The vanity mode will be toggled. If the player was in vanity mode, this will make the player leave vanity mode. Conversly, if the player wasn't in the vanity mode, this will turn on the vanity mode.
--- @return boolean changedVanityMode No description yet available.
function tes3.setVanityMode(params) end

---Table parameter definitions for `tes3.setVanityMode`.
--- @class tes3.setVanityMode.params
--- @field enabled boolean? *Default*: `true`. This flag sets the vanity mode as enabled or disabled.
--- @field checkVanityDisabled boolean? *Default*: `true`. This will prevent changing vanity mode according to vanityDisabled flag on tes3.mobilePlayer.
--- @field toggle boolean? *Default*: `false`. When this flag is set to true. The vanity mode will be toggled. If the player was in vanity mode, this will make the player leave vanity mode. Conversly, if the player wasn't in the vanity mode, this will turn on the vanity mode.

--- Sets player's kill count as a werewolf.
--- @param params tes3.setWerewolfKillCount.params This table accepts the following values:
--- 
--- `count`: number — Number of kills.
function tes3.setWerewolfKillCount(params) end

---Table parameter definitions for `tes3.setWerewolfKillCount`.
--- @class tes3.setWerewolfKillCount.params
--- @field count number Number of kills.

--- This function opens the alchemy menu.
function tes3.showAlchemyMenu() end

--- This function opens the contents menu. This menu is used for containers, companion inventories, and pickpocket attempts.
--- @param params tes3.showContentsMenu.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference to open the contents of.
--- 
--- `pickpocket`: boolean? — *Default*: `false`. If true, the contents menu will open in the context of an attempted pickpocketing.
--- @return boolean wasShown If true, the contents menu was successfully shown.
function tes3.showContentsMenu(params) end

---Table parameter definitions for `tes3.showContentsMenu`.
--- @class tes3.showContentsMenu.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference to open the contents of.
--- @field pickpocket boolean? *Default*: `false`. If true, the contents menu will open in the context of an attempted pickpocketing.

--- This function opens the dialogue menu. This behaves similar to the `ForceGreeting` mwscript command.
--- @param params tes3.showDialogueMenu.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference to open dialogue with.
--- 
--- `checkAllowWerewolfForceGreeting`: boolean? — *Default*: `true`. If true, the `AllowWerewolfForceGreeting` variable must exist on the reference's script to allow opening a dialogue while the player is a werewolf. This can be set to false to override the vanilla behavior.
--- @return boolean wasShown If true, the dialogue window was successfully shown.
function tes3.showDialogueMenu(params) end

---Table parameter definitions for `tes3.showDialogueMenu`.
--- @class tes3.showDialogueMenu.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference to open dialogue with.
--- @field checkAllowWerewolfForceGreeting boolean? *Default*: `true`. If true, the `AllowWerewolfForceGreeting` variable must exist on the reference's script to allow opening a dialogue while the player is a werewolf. This can be set to false to override the vanilla behavior.

--- This function opens the repair service menu.
--- @param params tes3.showRepairServiceMenu.params? This table accepts the following values:
--- 
--- `serviceActor`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string|nil — *Default*: `tes3mobilePlayer`. The actor to use for calculating the service price.
function tes3.showRepairServiceMenu(params) end

---Table parameter definitions for `tes3.showRepairServiceMenu`.
--- @class tes3.showRepairServiceMenu.params
--- @field serviceActor tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string|nil *Default*: `tes3mobilePlayer`. The actor to use for calculating the service price.

--- This function opens the resting menu and returns true on success. If the player can't rest currently, it returns false.
--- 
--- Various parameters can be used to allow resting in situations not normally possible.
--- @param params tes3.showRestMenu.params? This table accepts the following values:
--- 
--- `checkForEnemies`: boolean? — *Default*: `true`. Perform a check whether there are enemies nearby before opening rest menu. If there are, false is returned.
--- 
--- `checkForSolidGround`: boolean? — *Default*: `true`. Perform a check if the player is underwater. If underwater, false is returned.
--- 
--- `checkSleepingIllegal`: boolean? — *Default*: `true`. Perform a check if the sleeping in the current cell is illegal. If illegal, then the player will be prompted to wait instead of rest.
--- 
--- `checkIsWerewolf`: boolean? — *Default*: `true`. Perform a check if the player is Werewolf. If they are, then the player will be prompted to wait instead of rest.
--- 
--- `showMessage`: boolean? — *Default*: `true`. Should a messagebox be shown if the player can't open resting menu because some condition isn't met.
--- 
--- `resting`: boolean? — *Default*: `true`. Should this be a rest?
--- 
--- `waiting`: boolean? — *Default*: `false`. Or, is this a wait?
--- @return boolean success No description yet available.
function tes3.showRestMenu(params) end

---Table parameter definitions for `tes3.showRestMenu`.
--- @class tes3.showRestMenu.params
--- @field checkForEnemies boolean? *Default*: `true`. Perform a check whether there are enemies nearby before opening rest menu. If there are, false is returned.
--- @field checkForSolidGround boolean? *Default*: `true`. Perform a check if the player is underwater. If underwater, false is returned.
--- @field checkSleepingIllegal boolean? *Default*: `true`. Perform a check if the sleeping in the current cell is illegal. If illegal, then the player will be prompted to wait instead of rest.
--- @field checkIsWerewolf boolean? *Default*: `true`. Perform a check if the player is Werewolf. If they are, then the player will be prompted to wait instead of rest.
--- @field showMessage boolean? *Default*: `true`. Should a messagebox be shown if the player can't open resting menu because some condition isn't met.
--- @field resting boolean? *Default*: `true`. Should this be a rest?
--- @field waiting boolean? *Default*: `false`. Or, is this a wait?

--- This function opens the spellmaking menu and returns true on success.
--- @param params tes3.showSpellmakingMenu.params This table accepts the following values:
--- 
--- `serviceActor`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string|nil — *Optional*. The actor to use for calculating the service price. If none is provided, an open dialog menu's service actor will be used instead.
--- 
--- `useDialogActor`: boolean? — *Default*: `true`. If set to false, the dialog menu service actor will be ignored. If false, a serviceActor must be provided.
--- @return boolean success No description yet available.
function tes3.showSpellmakingMenu(params) end

---Table parameter definitions for `tes3.showSpellmakingMenu`.
--- @class tes3.showSpellmakingMenu.params
--- @field serviceActor tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string|nil *Optional*. The actor to use for calculating the service price. If none is provided, an open dialog menu's service actor will be used instead.
--- @field useDialogActor boolean? *Default*: `true`. If set to false, the dialog menu service actor will be ignored. If false, a serviceActor must be provided.

--- Skips a given reference's animation for a single frame.
--- @param params tes3.skipAnimationFrame.params This table accepts the following values:
--- 
--- `reference`: tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string — The reference whose animation frame will be skipped.
function tes3.skipAnimationFrame(params) end

---Table parameter definitions for `tes3.skipAnimationFrame`.
--- @class tes3.skipAnimationFrame.params
--- @field reference tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|tes3reference|string The reference whose animation frame will be skipped.

--- This function interrupts the current music to play the specified music track.
--- @param params tes3.streamMusic.params This table accepts the following values:
--- 
--- `path`: string — Path to the music file, relative to Data Files/music/.
--- 
--- `situation`: number? — *Default*: `tes3.musicSituation.uninterruptible`. Determines what kind of gameplay situation the music should stay active for. Explore music plays during non-combat, and ends when combat starts. Combat music starts during combat, and ends when combat ends. Uninterruptible music always plays, ending only when the track does. This value maps to [`tes3.musicSituation`](https://mwse.github.io/MWSE/references/music-situations/) constants.
--- 
--- `crossfade`: number? — *Default*: `1.0`. The duration in seconds of the crossfade from the old to the new track. The default is 1.0.
--- @return boolean executed No description yet available.
function tes3.streamMusic(params) end

---Table parameter definitions for `tes3.streamMusic`.
--- @class tes3.streamMusic.params
--- @field path string Path to the music file, relative to Data Files/music/.
--- @field situation number? *Default*: `tes3.musicSituation.uninterruptible`. Determines what kind of gameplay situation the music should stay active for. Explore music plays during non-combat, and ends when combat starts. Combat music starts during combat, and ends when combat ends. Uninterruptible music always plays, ending only when the track does. This value maps to [`tes3.musicSituation`](https://mwse.github.io/MWSE/references/music-situations/) constants.
--- @field crossfade number? *Default*: `1.0`. The duration in seconds of the crossfade from the old to the new track. The default is 1.0.

--- Simulates tapping a keyboard key.
--- @param keyCode number Maps to values in [`tes3.scanCode`](https://mwse.github.io/MWSE/references/scan-codes/) namespace.
function tes3.tapKey(keyCode) end

--- Checks if there is a clear line of sight between two references, or two points in space, in the same method that the game uses for actor vision. You should pass two references, or two positions and heights.
--- 
--- Only certain object types count as blocking for the purposes of the test:
--- Statics, activators, containers, doors, and lights with non-zero weight.
--- 
--- The collision root node is used for testing, if present in the model.
--- @param params tes3.testLineOfSight.params This table accepts the following values:
--- 
--- `reference1`: tes3reference — Position of the starting point of the LoS check. For actors, this point is set to position of this reference's head. For other objects the starting point is at the top of its bounding box.
--- 
--- `reference2`: tes3reference — Position of the ending point of the LoS check. For actors, this point is set to position of this reference's head. For other objects the ending point is at the top of its bounding box.
--- 
--- `position1`: tes3vector3|table — Position of the starting point of the LoS check. Modified by height1.
--- 
--- `height1`: tes3vector3|table|nil — *Optional*. Moves the starting point upwards (+Z direction) by this amount. Normally used to simulate head height from a position that is on the ground. Defaults to 0.
--- 
--- `position2`: tes3vector3|table — Position of the ending point of the LoS check. Modified by height2.
--- 
--- `height2`: tes3vector3|table|nil — *Optional*. Moves the starting point upwards (+Z direction) by this amount. Normally used to simulate head height from a position that is on the ground. Defaults to 0.
--- @return boolean hasLineOfSight No description yet available.
function tes3.testLineOfSight(params) end

---Table parameter definitions for `tes3.testLineOfSight`.
--- @class tes3.testLineOfSight.params
--- @field reference1 tes3reference Position of the starting point of the LoS check. For actors, this point is set to position of this reference's head. For other objects the starting point is at the top of its bounding box.
--- @field reference2 tes3reference Position of the ending point of the LoS check. For actors, this point is set to position of this reference's head. For other objects the ending point is at the top of its bounding box.
--- @field position1 tes3vector3|table Position of the starting point of the LoS check. Modified by height1.
--- @field height1 tes3vector3|table|nil *Optional*. Moves the starting point upwards (+Z direction) by this amount. Normally used to simulate head height from a position that is on the ground. Defaults to 0.
--- @field position2 tes3vector3|table Position of the ending point of the LoS check. Modified by height2.
--- @field height2 tes3vector3|table|nil *Optional*. Moves the starting point upwards (+Z direction) by this amount. Normally used to simulate head height from a position that is on the ground. Defaults to 0.

--- Forces a toggle of the player's POV the next simulation frame, and returns if the player was previously in 3rd person. Multiple calls in the same frame will not stack.
--- @return boolean was3rdPerson No description yet available.
function tes3.togglePOV() end

--- Moves one or more items from one reference to another. Returns the actual amount of items successfully transferred.
--- @param params tes3.transferItem.params This table accepts the following values:
--- 
--- `from`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to take items from.
--- 
--- `to`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — Who to give items to.
--- 
--- `item`: tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string — The item to transfer.
--- 
--- `itemData`: tes3itemData? — *Optional*. The specific item data to transfer if, for example, you want to transfer a specific player item.
--- 
--- `count`: number? — *Default*: `1`. The maximum number of items to transfer.
--- 
--- `playSound`: boolean? — *Default*: `true`. If false, the up/down sound for the item won't be played.
--- 
--- `limitCapacity`: boolean? — *Default*: `true`. If false, items can be placed into containers that shouldn't normally be allowed. This includes organic containers, and containers that are full.
--- 
--- `reevaluateEquipment`: boolean? — *Default*: `true`. If true, and the item transferred is armor, clothing, or a weapon, the actors will reevaluate their equipment choices to see if the new item is worth equipping. This does not affect the player.
--- 
--- `equipProjectiles`: boolean? — *Default*: `true`. If true, and the reference has the same projectile already equipped, the stacks will be merged. This will only work if the GUI is updated.
--- 
--- `updateGUI`: boolean? — *Default*: `true`. If false, the function won't manually resync the player's GUI state. This can result in some optimizations, though [`tes3ui.forcePlayerInventoryUpdate()`](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uiforceplayerinventoryupdate) must manually be called after all inventory updates are finished.
--- @return number transferredCount No description yet available.
function tes3.transferItem(params) end

---Table parameter definitions for `tes3.transferItem`.
--- @class tes3.transferItem.params
--- @field from tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to take items from.
--- @field to tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string Who to give items to.
--- @field item tes3alchemy|tes3apparatus|tes3armor|tes3book|tes3clothing|tes3ingredient|tes3light|tes3lockpick|tes3misc|tes3probe|tes3repairTool|tes3weapon|string The item to transfer.
--- @field itemData tes3itemData? *Optional*. The specific item data to transfer if, for example, you want to transfer a specific player item.
--- @field count number? *Default*: `1`. The maximum number of items to transfer.
--- @field playSound boolean? *Default*: `true`. If false, the up/down sound for the item won't be played.
--- @field limitCapacity boolean? *Default*: `true`. If false, items can be placed into containers that shouldn't normally be allowed. This includes organic containers, and containers that are full.
--- @field reevaluateEquipment boolean? *Default*: `true`. If true, and the item transferred is armor, clothing, or a weapon, the actors will reevaluate their equipment choices to see if the new item is worth equipping. This does not affect the player.
--- @field equipProjectiles boolean? *Default*: `true`. If true, and the reference has the same projectile already equipped, the stacks will be merged. This will only work if the GUI is updated.
--- @field updateGUI boolean? *Default*: `true`. If false, the function won't manually resync the player's GUI state. This can result in some optimizations, though [`tes3ui.forcePlayerInventoryUpdate()`](https://mwse.github.io/MWSE/apis/tes3ui/#tes3uiforceplayerinventoryupdate) must manually be called after all inventory updates are finished.

--- Emulates the player committing a crime. Returns `true` if the crime was witnessed by an actor.
--- @param params tes3.triggerCrime.params This table accepts the following values:
--- 
--- `type`: number? — *Default*: `tes3.crimeType.theft`. The type of crime to be committed. Maps to values in the [`tes3.crimeType`](https://mwse.github.io/MWSE/references/crime-types/) table.
--- 
--- `victim`: tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|tes3faction|nil — *Default*: `tes3.mobilePlayer`. The victim of the crime. This can be an individual actor or a entire faction. Has no effect on crimes with a `type` of `tes3.crimeType.trespass` or `tes3.crimeType.werewolf`.
--- 
--- `value`: number? — *Default*: `0`. Only valid if `type` is `tes3.crimeType.theft`. The value of the stolen objects.
--- 
--- `forceDetection`: boolean? — *Default*: `false`. If `true`, bypasses regular detection logic and forces all nearby actors to detect the crime.
--- @return boolean result No description yet available.
function tes3.triggerCrime(params) end

---Table parameter definitions for `tes3.triggerCrime`.
--- @class tes3.triggerCrime.params
--- @field type number? *Default*: `tes3.crimeType.theft`. The type of crime to be committed. Maps to values in the [`tes3.crimeType`](https://mwse.github.io/MWSE/references/crime-types/) table.
--- @field victim tes3mobileNPC|tes3mobilePlayer|tes3container|tes3containerInstance|tes3creature|tes3creatureInstance|tes3npc|tes3npcInstance|tes3faction|nil *Default*: `tes3.mobilePlayer`. The victim of the crime. This can be an individual actor or a entire faction. Has no effect on crimes with a `type` of `tes3.crimeType.trespass` or `tes3.crimeType.werewolf`.
--- @field value number? *Default*: `0`. Only valid if `type` is `tes3.crimeType.theft`. The value of the stolen objects.
--- @field forceDetection boolean? *Default*: `false`. If `true`, bypasses regular detection logic and forces all nearby actors to detect the crime.

--- Changes a reference back from werewolf form to human. This function works only on a reference infected with Lycanthropy, be it the player or any other reference. Returns true if successful.
--- @param params tes3.undoTransform.params This table accepts the following values:
--- 
--- `reference`: tes3reference — A reference to change back to human.
--- @return boolean success No description yet available.
function tes3.undoTransform(params) end

---Table parameter definitions for `tes3.undoTransform`.
--- @class tes3.undoTransform.params
--- @field reference tes3reference A reference to change back to human.

--- Stops simulating hammering a keyboard key.
--- @param keyCode number Maps to values in [`tes3.scanCode`](https://mwse.github.io/MWSE/references/scan-codes/) namespace.
function tes3.unhammerKey(keyCode) end

--- Unlocks an object. Returns true if the object can be and wasn't already unlocked.
--- @param params tes3.unlock.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — No description yet available.
--- @return boolean unlocked No description yet available.
function tes3.unlock(params) end

---Table parameter definitions for `tes3.unlock`.
--- @class tes3.unlock.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string No description yet available.

--- Forces the GUI to update inventory-relevant elements for a given reference. This can be used after many calls to inventory-manipulating functions while passing updateGUI as false to resync inventory tiles, container weights, and companion data.
--- @param params tes3.updateInventoryGUI.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to update GUI elements for.
function tes3.updateInventoryGUI(params) end

---Table parameter definitions for `tes3.updateInventoryGUI`.
--- @class tes3.updateInventoryGUI.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to update GUI elements for.

--- Updates the journal index in a way similar to the mwscript function Journal.
--- @param params tes3.updateJournal.params This table accepts the following values:
--- 
--- `id`: tes3dialogue|string — No description yet available.
--- 
--- `index`: number — No description yet available.
--- 
--- `showMessage`: boolean? — *Default*: `false`. If set, a message may be shown to the player.
--- @return boolean wasSet No description yet available.
function tes3.updateJournal(params) end

---Table parameter definitions for `tes3.updateJournal`.
--- @class tes3.updateJournal.params
--- @field id tes3dialogue|string No description yet available.
--- @field index number No description yet available.
--- @field showMessage boolean? *Default*: `false`. If set, a message may be shown to the player.

--- Forces the GUI to update magic-relevant elements for a given reference. This can be used after many calls to magic- or magic item-manipulating functions while passing updateGUI as false to resync inventory tiles, container weights, and companion data.
--- @param params tes3.updateMagicGUI.params This table accepts the following values:
--- 
--- `reference`: tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string — The reference to update GUI elements for.
--- 
--- `updateSpells`: boolean? — *Default*: `true`. Determines if the spell and power lists are refreshed.
--- 
--- `updateEnchantments`: boolean? — *Default*: `true`. Determines if the enchanted items list is refreshed.
function tes3.updateMagicGUI(params) end

---Table parameter definitions for `tes3.updateMagicGUI`.
--- @class tes3.updateMagicGUI.params
--- @field reference tes3reference|tes3mobileActor|tes3mobileCreature|tes3mobileNPC|tes3mobilePlayer|string The reference to update GUI elements for.
--- @field updateSpells boolean? *Default*: `true`. Determines if the spell and power lists are refreshed.
--- @field updateEnchantments boolean? *Default*: `true`. Determines if the enchanted items list is refreshed.

--- This function wakes player up and returns true if successful.
--- 
--- Note this function returns false if WorldController or MobilePlayer aren't initialized, and if the player is not sleeping or waiting
--- @return boolean wokeUp No description yet available.
function tes3.wakeUp() end

tes3.actionFlag = require("tes3.actionFlag")
tes3.activeBodyPart = require("tes3.activeBodyPart")
tes3.activeBodyPartLayer = require("tes3.activeBodyPartLayer")
tes3.actorType = require("tes3.actorType")
tes3.aiBehaviorState = require("tes3.aiBehaviorState")
tes3.aiPackage = require("tes3.aiPackage")
tes3.animationBodySection = require("tes3.animationBodySection")
tes3.animationGroup = require("tes3.animationGroup")
tes3.animationStartFlag = require("tes3.animationStartFlag")
tes3.animationState = require("tes3.animationState")
tes3.apparatusType = require("tes3.apparatusType")
tes3.armorSlot = require("tes3.armorSlot")
tes3.armorWeightClass = require("tes3.armorWeightClass")
tes3.attachmentType = require("tes3.attachmentType")
tes3.attribute = require("tes3.attribute")
tes3.attributeName = require("tes3.attributeName")
tes3.bodyPartAttachment = require("tes3.bodyPartAttachment")
tes3.bookType = require("tes3.bookType")
tes3.clothingSlot = require("tes3.clothingSlot")
tes3.codePatchFeature = require("tes3.codePatchFeature")
tes3.contentType = require("tes3.contentType")
tes3.creatureType = require("tes3.creatureType")
tes3.crimeType = require("tes3.crimeType")
tes3.damageSource = require("tes3.damageSource")
tes3.dialoguePage = require("tes3.dialoguePage")
tes3.dialogueType = require("tes3.dialogueType")
tes3.effect = require("tes3.effect")
tes3.effectAttribute = require("tes3.effectAttribute")
tes3.effectEventType = require("tes3.effectEventType")
tes3.effectRange = require("tes3.effectRange")
tes3.enchantmentType = require("tes3.enchantmentType")
tes3.event = require("tes3.event")
tes3.flowDirection = require("tes3.flowDirection")
tes3.gmst = require("tes3.gmst")
tes3.inventorySelectFilter = require("tes3.inventorySelectFilter")
tes3.inventoryTileType = require("tes3.inventoryTileType")
tes3.itemSoundState = require("tes3.itemSoundState")
tes3.justifyText = require("tes3.justifyText")
tes3.keybind = require("tes3.keybind")
tes3.keyTransition = require("tes3.keyTransition")
tes3.language = require("tes3.language")
tes3.languageCode = require("tes3.languageCode")
tes3.magicSchool = require("tes3.magicSchool")
tes3.magicSourceType = require("tes3.magicSourceType")
tes3.merchantService = require("tes3.merchantService")
tes3.musicSituation = require("tes3.musicSituation")
tes3.niType = require("tes3.niType")
tes3.objectType = require("tes3.objectType")
tes3.palette = require("tes3.palette")
tes3.partIndex = require("tes3.partIndex")
tes3.physicalAttackType = require("tes3.physicalAttackType")
tes3.quickKeyType = require("tes3.quickKeyType")
tes3.scanCode = require("tes3.scanCode")
tes3.scanCodeToNumber = require("tes3.scanCodeToNumber")
tes3.skill = require("tes3.skill")
tes3.skillName = require("tes3.skillName")
tes3.skillRaiseSource = require("tes3.skillRaiseSource")
tes3.skillType = require("tes3.skillType")
tes3.soundGenType = require("tes3.soundGenType")
tes3.soundMix = require("tes3.soundMix")
tes3.specialization = require("tes3.specialization")
tes3.specializationName = require("tes3.specializationName")
tes3.spellSource = require("tes3.spellSource")
tes3.spellState = require("tes3.spellState")
tes3.spellType = require("tes3.spellType")
tes3.uiElementType = require("tes3.uiElementType")
tes3.uiEvent = require("tes3.uiEvent")
tes3.uiProperty = require("tes3.uiProperty")
tes3.uiState = require("tes3.uiState")
tes3.vfxContext = require("tes3.vfxContext")
tes3.voiceover = require("tes3.voiceover")
tes3.weaponType = require("tes3.weaponType")
tes3.weather = require("tes3.weather")
