-- This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
-- More information: https://github.com/MWSE/MWSE/tree/master/docs

--- @meta
--- @diagnostic disable:undefined-doc-name

--- A rotation in quaternion representation.
--- @class niQuaternion
--- @operator mul(niQuaternion): niQuaternion
--- @field w number The W component of the quaternion.
--- @field x number The X component of the quaternion.
--- @field y number The Y component of the quaternion.
--- @field z number The Z component of the quaternion.
niQuaternion = {}

--- Creates a new niQuaternion object.
--- @param w number? *Default*: `0`. No description yet available.
--- @param x number? *Default*: `0`. No description yet available.
--- @param y number? *Default*: `0`. No description yet available.
--- @param z number? *Default*: `0`. No description yet available.
--- @return niQuaternion quaternion No description yet available.
function niQuaternion.new(w, x, y, z) end

--- Creates a copy of the quaternion.
--- @return niQuaternion result No description yet available.
function niQuaternion:copy() end

--- Fill the quaternion by converting an angle-axis rotation. The angle must be within the interval [0, PI] and the axis must be unit length.
--- @param angle number No description yet available.
--- @param axis tes3vector3 No description yet available.
function niQuaternion:fromAngleAxis(angle, axis) end

--- Fill the quaternion by converting a rotation matrix.
--- @param matrix tes3matrix33 No description yet available.
function niQuaternion:fromRotation(matrix) end

--- Inverting or conjugating a rotation quaternion has the effect of reversing the axis of rotation, which modifies it to rotate in the opposite direction from the original. That is, if an object is rotated to a new position using a quaternion, then rotating it again by quaternion's inverse will return it to its original location.
--- @return niQuaternion result No description yet available.
function niQuaternion:invert() end

--- Calculates the spherical linear interpolate between this quaternion and another.
--- @param target niQuaternion The quaternion to interpolate towards.
--- @param transition number The interpolation value. Must be between `0.0` (closer to this quaternion) and `1.0` (closer to the other quaternion).
--- @return niQuaternion result The calculated result.
function niQuaternion:slerp(target, transition) end

--- Convert this quaternion into an angle-axis rotation.
--- @return number angle No description yet available.
--- @return tes3vector3 axis No description yet available.
function niQuaternion:toAngleAxis() end

--- Convert this quaternion into a rotation matrix.
--- @return tes3matrix33 result No description yet available.
function niQuaternion:toRotation() end

