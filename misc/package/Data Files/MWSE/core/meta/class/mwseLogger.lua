--- @meta

-- This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
-- More information: https://github.com/MWSE/MWSE/tree/master/docs

--- A class to facilitate printing log messages. A new one can be constructed by simply calling `require("logger").new()`. Log messsages include: 
--- 
--- 1) Mod name. This is retrieved automatically if not explicitly provided during logger construction. 
--- 2) The path of the file for which the logging message originated. This is retrieved automatically.
--- 3) The line number on which the logging message appeared. This is retrieved automatically.
--- 4) Optionally: a timestamp indicating the time since game launch.
--- 5) Optionally: a "module name" for the module that issued the logging message.
--- If desired, this must be provided during logger construction. See [`moduleName`](#modulename)
--- 
--- 
--- Logging messages will be passed through `string.format` if desired, and any `table` and `userdata` arguments will be prettyprinted. Additionally, it is possible to lazily evaluate functions that are supplied to the logging methods. For more information on how this works, see the documentation for [`Logger:debug`](#debug).
--- 
--- Several logging setting are synchronized between the different loggers used by the same mod, so they only need to be updated in one place.
--- @class mwseLogger
--- @field filepath string The path to the file this `mwseLogger` was created in. This will be relative to the `modDir`.
--- 
--- For example, if this `mwseLogger` was constructed in `mods/My Awesome Mod/main.lua`, then the `filepath` will be `main.lua`.
--- @field includeTimestamp boolean If set to `true`, all the logged messages will include a timestamp.
--- @field level mwseLogger.LOG_LEVEL The current logging level.
--- @field logToConsole boolean If `true`, all the logged messages will also be logged to console.
--- @field modName string Name of the mod, also counts as unique id of the logger.
--- @field moduleName any Associates a logger with a particular "module". 
--- The `moduleName` will be printed in logging messages next to the `modName`.
--- What does and does not constitute a "module" is entirely subjective. Use this field as you please. 
--- This can be useful if the `filepath` alone is not enough to distinguish what code is reponsible for issuing a log message.
--- For example, the MWSE dependency management system uses a `moduleName` to alert the user about which mod had a dependency problem.
--- 	
mwseLogger = {}

--- Creates a new logger based on the input parameters.
--- @param params mwseLogger.new.params? This table accepts the following values:
--- 
--- `modName`: string? — *Optional*. The name of MWSE mod associated to this Logger. This will be retrieved automatically if not provided.
--- 
--- `moduleName`: string? — *Optional*. The module this Logger is associated with. This can be useful for distinguishes which parts of your mod produce certain log messages. This will be displayed next to the name of the mod, in parentheses.
--- 
--- `level`: mwseLogger.LOG_LEVEL? — *Default*: `mwseLogger.LOG_LEVEL.DEBUG`. The logging level for all loggers associated to this mod.
--- 
--- `logToConsole`: bool? — *Default*: `false`. Should the output also be written to the in-game console?
--- 
--- `outputFile`: bool|string|nil — *Default*: `false`. The path of the output file to write log messages in. This path is taken relative to `Data Files/MWSE/logs/`. If not provided, log messages will be written to `MWSE.log`. If `true`, then the `modDir` will be used as the output path.
--- 
--- `includeLineNumber`: bool? — *Default*: `true`. Should line numbers be included in logging messages?
--- 
--- `includeTimestamp`: bool? — *Default*: `true`. Should timestamps be included in logging messages? The timestamps are relative to the time that the game was launched.
--- 
--- `abbreviateHeader`: bool? — *Default*: `false`. Should the headers be abbreviated?
--- 
--- `formatter`: nil|fun(self: Logger, record: mwseLogger.Record, ...: string|any|fun(...): ...): string — *Optional*. A custom formatter. This lets you customize how your logging messages are formatted. If not provided, the default formatter will be used.
--- 
--- `modDir`: string? — *Optional*. The directory this mod resides in. This will be retrieved automatically if not provided. This parameter should not be used in the vast majority of situations.
--- 
--- `filepath`: string? — *Optional*. The path of the file that this Logger is used in. This will be retrieved automatically if not provided. This path is relative to `modDir`. This parameter should not be used in the vast majority of situations.
--- @return mwseLogger log The newly created logger.
function mwseLogger.new(params) end

---Table parameter definitions for `mwseLogger.new`.
--- @class mwseLogger.new.params
--- @field modName string? *Optional*. The name of MWSE mod associated to this Logger. This will be retrieved automatically if not provided.
--- @field moduleName string? *Optional*. The module this Logger is associated with. This can be useful for distinguishes which parts of your mod produce certain log messages. This will be displayed next to the name of the mod, in parentheses.
--- @field level mwseLogger.LOG_LEVEL? *Default*: `mwseLogger.LOG_LEVEL.DEBUG`. The logging level for all loggers associated to this mod.
--- @field logToConsole bool? *Default*: `false`. Should the output also be written to the in-game console?
--- @field outputFile bool|string|nil *Default*: `false`. The path of the output file to write log messages in. This path is taken relative to `Data Files/MWSE/logs/`. If not provided, log messages will be written to `MWSE.log`. If `true`, then the `modDir` will be used as the output path.
--- @field includeLineNumber bool? *Default*: `true`. Should line numbers be included in logging messages?
--- @field includeTimestamp bool? *Default*: `true`. Should timestamps be included in logging messages? The timestamps are relative to the time that the game was launched.
--- @field abbreviateHeader bool? *Default*: `false`. Should the headers be abbreviated?
--- @field formatter nil|fun(self: Logger, record: mwseLogger.Record, ...: string|any|fun(...): ...): string *Optional*. A custom formatter. This lets you customize how your logging messages are formatted. If not provided, the default formatter will be used.
--- @field modDir string? *Optional*. The directory this mod resides in. This will be retrieved automatically if not provided. This parameter should not be used in the vast majority of situations.
--- @field filepath string? *Optional*. The path of the file that this Logger is used in. This will be retrieved automatically if not provided. This path is relative to `modDir`. This parameter should not be used in the vast majority of situations.

--- Assert a condition and log an error if it fails.
--- @param condition boolean No description yet available.
--- @param message string No description yet available.
--- @param ... any? *Optional*. Formatting arguments. These are passed to `string.format`.
function mwseLogger:assert(condition, message, ...) end

--- Logs a debug message, if the logging level is `DEBUG` or higher.
--- The simplest way to use this method is to log ordinary strings to the logging file:
--- ```lua
--- local Logger = require("Logger")
--- local log = Logger.new{ level = Logger.LOG_LEVEL.DEBUG }
--- log:("This is a string!")
--- ```
--- results in the following message being printed to `MWSE.log`:
--- ```
--- [My Awesome Mod | main.lua:3  | DEBUG] This is a string!
--- ```
--- Notice that the mod name, filepath, and line number were retrieved automatically during logger construction. 
--- 
--- When supplying more than one argument to this function, the arguments will be prettyprinted and then passed to `string.format`. 
--- See the examples for more information.
--- 	
---
--- [Examples available in online documentation](https://mwse.github.io/MWSE/types/mwseLogger/#debug).
--- @param ... any? *Optional*. Logging arguments. These are handled as follows:
--- 
--- 	- Things with a `tostring` metamethod are printed according to that metamethod.
--- 		- This includes all primitive types, such as `string`s and `number`s.
--- 	- `table`s without a `tostring` metamethod are prettyprinted using the `inspect` library.
--- 	- `function`s are evaluated lazily, consuming subsequent inputs based on their definition.
--- 		- (For example, if a function takes 2 arguments, then it will consume the next two arguments.)
--- 
--- Additionally, there are more than two formatting arguments (after lazily evaluating all functions),
--- then `string.format` will be called on those arguments.
--- 
function mwseLogger:debug(...) end

--- 		Returns true if the messages of the given log level will be logged.
--- 		The preferred way of doing this is to access `Logger.level` directly and compare it with the log level constants. E.g.,
--- 		```lua
--- 		local Logger = require("Logger")
--- 		local log = Logger.new()
--- 		if log.level >= Logger.LEVEL.DEBUG then 
--- 			-- do sstuff
--- 		end
--- 		```
--- 		However, in practice this shouldn't be all that necessary due to the ability to lazy-evaluate the arguments to the logging functions.
--- 	
--- @deprecated
--- @param logLevel mwseLoggerLogLevel Options are: "TRACE", "DEBUG", "INFO", "WARN", "ERROR" and "NONE".
--- @return boolean doLog No description yet available.
function mwseLogger:doLog(logLevel) end

--- Log error message.
--- @param message string No description yet available.
--- @param ... any? *Optional*. Formatting arguments. These are passed to `string.format`.
function mwseLogger:error(message, ...) end

--- Log info message.
--- @param message string No description yet available.
--- @param ... any? *Optional*. Formatting arguments. These are passed to `string.format`.
function mwseLogger:info(message, ...) end

--- Set the log level. Options are: "TRACE", "DEBUG", "INFO", "WARN", "ERROR" and "NONE".
--- @param newLogLevel mwseLoggerLogLevel No description yet available.
function mwseLogger:setLogLevel(newLogLevel) end

--- Set the output file. If set, logs will be sent to a file of this name.
--- @param outputFile string No description yet available.
function mwseLogger:setOutputFile(outputFile) end

--- Log trace message.
--- @param message string No description yet available.
--- @param ... any? *Optional*. Formatting arguments. These are passed to `string.format`.
function mwseLogger:trace(message, ...) end

--- Log warn message.
--- @param message string No description yet available.
--- @param ... any? *Optional*. Formatting arguments. These are passed to `string.format`.
function mwseLogger:warn(message, ...) end

